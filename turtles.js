var sketchProc=function(processingInstance){ with (processingInstance){
size(400, 400); 
frameRate(60);

/*

Author :- Ameya Khandekar
ECE 4525 Video Game Design Project 4

Creative Aspects of the game :- 
1) Designed turtles, snakes, bombs, tomatoes for the game world.
2) In this game, the player can save themself from the enemies by planting a bomb to distract the enemy. (Drew the bomb myself. Making use of an open source gif for Fire animation)
3) All specifications of the Problem statement are met.
4) The obstacles are avoided by changing the direction of approach towards the obstacles for NPCs.
5) made use of some open source images to create background tiles.
6) The credit for the image files used for background goes to :- 
 a) fireImages animation :- http://opengameart.org/content/camp-fireImages-animation-for-rpgs-finished 
 b) Stones :- http://opengameart.org/sites/default/files/styles/watermarked/public/wood_tileset_2.png
 c) Water :- http://opengameart.org/sites/default/files/styles/watermarked/public/images/TUTO_chap8_mer.png
 
7) To use external images on Khan Academy interface, the image pixel data is converted into unicode using following Java program which I wrote:- 

{
import java.io.*;
import java.awt.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

class ImgMat{

	public static void main(String args[]) throws IOException{
	
		System.out.println(args[0]);

		File file = new File(args[0]);
		BufferedImage image = ImageIO.read(file);
		
		System.out.print("rMat = [\n");
		for(int i  = 0 ;  i < image.getWidth() ; i++){
			System.out.print("\"");
			for(int j = 0 ; j < image.getHeight(); j++){
				int clr = image.getRGB(i,j);
				int red = (clr & 0x00ff0000) >> 16;
				System.out.print((char)(200 + red));
			}
			System.out.print("\",\n");
		
		}
		System.out.print("];\n");

		System.out.print("gMat = [\n");
		for(int i  = 0 ;  i < image.getWidth() ; i++){
			System.out.print("\"");
			for(int j = 0 ; j < image.getHeight(); j++){
				int clr = image.getRGB(i,j);
				int green = (clr & 0x0000ff00) >> 8;
				System.out.print((char)(200 + green));
			}
			System.out.print("\",\n");
		
		}
		System.out.print("];\n");

		System.out.print("bMat = [\n");
		for(int i  = 0 ;  i < image.getWidth() ; i++){
			System.out.print("\"");
			for(int j = 0 ; j < image.getHeight(); j++){
				int clr = image.getRGB(i,j);
				int blue = (clr & 0x000000ff);
				System.out.print((char)(200 + blue));
			}
			System.out.print("\",\n");
		
		}
		System.out.print("];\n");
	}
}
}

8) Externally encoded unicode image files are read using the following code in this program :- 
for(var i  = 0 ; i < 40 ; i++){
    for(var j = 0 ; j < 40 ; j++){
        fill(rMat[i].charCodeAt(j) - 200,gMat[i].charCodeAt(j) - 200, bMat[i].charCodeAt(j) - 200);
        rect(10*i,10*j,10,10);
    }
}


    images.push(get(0,0,400,400));   //images[1] is grass tile.
    
Basically, each pixel is treated as a rectangle.

Making use of well designed grass tiles, makes the background look realistic.
*/

{
frameRate(60);
angleMode = "radians";  //Comment this line out if not using on Khan Academy
var toPI = PI/180;

// Start screen to overlap time with creating custom characters
var start = 0;
var images = [];
var fireImages = [];
var snakeImages = [];
var keyArray = [];
var customCharMade = 0;
var translateState = 0;
var translateDist = 0;
var score = 0;
var gameOverCounter = 300;
var rMat,gMat,bMat;
var won = 0;

var customChar = function(){
    customCharMade = 1;
    
rMat = [
"ĮŞŬůźƋƍƌƂŵŵƅƋƋƄśūŶŵŹƊƍƍƍƍƊšķĩŀŏŔşŷŷšŕŏŀĨ",
"ĳŠŭŭŵƋƍƃŷŰŽƉƍƍƇŜŔŠŭŮźƇƍƍƌƀŘīěŎŖňńŔŔŃňŖŏĘ",
"ŇťŭŭŵƋƍŻűŻƌƍƍƍƊŹōŔŮŭŮƃƍƋƁŦłħĬťŵŠŇĺıłŜŮŧĵ",
"ŉťŭŭŴƇƉŸŹƍƍƍƍƍƍƋŔŔŬŨŨžƊƄŬňĥĦŊūƄžšĸĘŏŭŭŭŬ",
"ŉťŭŭŮŰůŭŹƍƍƍƍƍƍƌŕŔţŃłşŰůũŇĺŌũůƅƌűĹėŐŭŭŭŭ",
"ŉťŭŭŭŨĶŏźƍƍƍƍƍƍƌŮŕņĻğĹŊŊŇĥĮŐŬůƅƍŴĹĖŐŭŭŭŭ",
"ŉťŭŭŢĿľŚźƍƍƍƍƍƍƍƄşĵĤĥŅŗŐĽīŃşŬůƅƍŴŀŁşŭŭŭŭ",
"ŅŋŢŭśĩśŭźƍƍƍƍƍƍƍƏŨĴĠĸŝŲŮŏŁŚŭůŸƇƈŬŇŧŭŭŰŷŸ",
"ŉĜŁšŝŊŨŰŷƉƍƍƍƍƍƍƋšĵļńŢžƇŰŎŘŨųƉƌŴŖŌŨűŰŵƌƍ",
"źĥĔĪŊŨƂŹůŵƋƍƌƌƍƍŸŀĜŀŢžƌƍƈűŒœŲƊƋŎĳŦŮƁżŵƌƍ",
"ƄŀĚĢňŬƆŻŭųƊƍƀżƍƋņĚĚŁŧƃƍƍƍƆśŐŲƈźĽĭŪůƄžŵƌƍ",
"ƅŌĠĢňŬƆƄŹůŻƉżŷƋżŀĲŇŚŸƈƍƍƍƌŭŕśųŋġĭŭŽƉžŵƌƍ",
"ƇŘĥĢňŬƆƍƆŹŹƀŷŷƉűŋŔŮŰƉƍƍƍƍƍƁśĴńĞğŃŰƈƅŸŲƂƋ",
"ƋŰĵģŀťƀƋƍƍƋŶŰŹƄŰŋŔůŵƉƍƍƍƍƍƍŢĝđĔŃŬűƃŵŭŭűƈ",
"ƋŲŌĪĠŃťƀƍƍƌŶžƂŰŬŌŔŵƊƍƍƍƍƍƍƍžŖęĮŕŭŮűůŮŮŲƈ",
"ƋŲŐňŘşŎŢſƍƍƈƊƄŮŭťŧŶƍƍƎƍƍƍƍƍƊůĝıŘŭűƂƆŹųƆƌ",
"ƋŲŐŒŭŬŜŔōŎŷŽŽŮŖŪŭŭŶƍƍƁƃƍƍƍƍƇŨĜıŘŭŲƉƍƆƃƍƍ",
"ƋŲŐŒŭŭŭŒİĤņŋŔŒŃŨŭŭŶƋƄŻƀƍƍƍƍźŎęıŘűŻƊƍƍƍƍƍ",
"ƋŲŊŊŦŬŭŖłĶĘĎĢĸłšūŭŶƊŲƂƎƍƍƍƋŬĶĕīŐűƈƍƍƍƍƍƍ",
"ƉűĴĤňũŭūřĽĸĜĔģŀłŠŭŵƈŲƃƍƍƍƌżŝĶēđīŐųƈƍƍƍƍƍ",
"ŶŬıĒīŦŭŭŜľľŐŗŚŝłŠŭůŴůƃƍƍƋźŰŜĶēĎĨōŬŴƅƍƍƍƍ",
"ŭŕĦčĝŎŧōĮħĽŢŭŭŤĬŖŮŭŭŮƃƍƍƉŞŒŔŏĬĔĨōŬŮƄƍƍƍƍ",
"ŬņĠĕĥĽœĭĚĶŎŦŭŭŢěŐŮŭŭŮƃƍƊŽŌŇşųŜļĸŁŎŪƄƍƍƍƍ",
"ţļġĪņŇŇīĵŪŬŭŭŭţīŎũŮųŮƃƎƄŤĿŘżƌƊŸŚĴğšſƊƍƍƈ",
"ŃĞĭŏũūũōŌŬŭŭŭŭŬťŌŖŷƇŴƃƎżŀġŚƊƍƍƊŹŏģŜūźƈƈű",
"ŁĵőŧųƂųŒŏŬŭŭŭŭŭŬŋşƉƌƇƋƎŴģŊŨžƍƍƍƉŷőĬļŋřŮŏ",
"ŁľŜŵƃƋƂũŌľŧŭŭŭŭŬŋţƏƍƍƍƎŲĜřŭźƌƍƍƍƃũŋŀĮĮŋĨ",
"ŃŌŢŻƍƍƍƂŘĭŦŭŭűŸŮŋţƏƍƍƍƉŨěřŭźƍƍƍƍƆŸŮřĸĢħđ",
"ŇťŭŻƍƍƍƍűńřũŰŻƉűŋśƃƌƍƍƁřĚřŭŶƇƍƍƍƍƉŲűŞĹĘĖ",
"ŇťŭŻƍƍƍƍŲĺĞŗžƌƉŮŉĽŔƆƋƌŽŔĚřůŰŷƊƍƍƌƈŴƂżşľĻ",
"ŇťŭŻƍƎƍƍžŝĻŠƀƎƅŏĤĨłŏŭŵŐĜĕřŽƇƉƌƍƍƅŷƅƌƋŽšł",
"ňťŭŲźżƉƍƁŦłĴřżŰĪĒĕĦļōŐĳčĔŚƁƍƍƍƍƍƃŰŹƇƍƊŽŠ",
"ŉťŭŲŶůżƈƆůłĦĳňłģđĞĺŏŐőĳčđĻũƅƍƍƍƍƃŰŸƇƍƍƌž",
"ŉťűžƇŵůƀƍƀŅĽĤčĔĿīŇŵŴŴŵőġğēņźƌƍƍƍƅŸƊƍƍƍƍƈ",
"ňţſƌƍƈŴƀƍƀŉłħďęşũŹƌƋƋƋŽũšġņźƌƍƌƌƍƋƍƍƍƍƊŴ",
"ŅņųƍƍƋŵƀƍƆŨŤŋħęŢſƊƍƍƍƍƋƁŨģŅŹƌƋźƁƍƍƍƍƍƍƉŲ",
"łĿţƂƍƌƃƈƍƈűŭŤłęŢƄƍƍƍƍƍƍƆũģģŎŹŹűžƍƍƍƍƍƈŶŗ",
"ıĺŜŵƃƌƍƍƈŽůŭŮŜĽŧƄƇƃƌƍƍƍƆŬŀĞĢŌũŭŷƄƍƍƍƇŵŖı",
"ěĶŔŦŵƋƍƉŽŮŭŭŭŭŬŭžźŵƍƍƍƍƈŶŭĵčĜŐŨŭŸƌƍƍžŝıē",
"ĢıĸŉŦżŽŮŤŢšŠŢţŠšţšŨžſƀſŽŻŦİĎďĖŌšŪžŽžűŊĐĎ",
];
gMat = [
"ĬœşšūŽſŻűŦŧųŸŸŲœŞŧŧŮżſſſžŹŕĲĨĺňōŗŬŬśőňĹĦ",
"İœŝŝţŵŷůŤşũŴŷŷűŐŊœŝŞŨŲŷŷŶŬōīĞŅŋŁľŊŊľŁŌņě",
"ŁŖŝŝţŵŷŨŠŨŶŷŷŷŵŧŅŊŞŝŞŮŷŵŭŘļħīŗţœŀķįĽŐŞřı",
"ŃŖŝŝţŲŴŦŦŷŷŷŷŷŷŶŋŊŜřřũŵůŜŁĦĦłśŰūœĵĜņŞŝŝŝ",
"ŃŖŝŝŞşŞŝŦŷŷŷŷŷŷŶŋŊŕľĽŒşŞŚŁķŃřŞŰŶšĶěņŝŝŝŝ",
"ŃŖŝŝŝŚĲņŧŷŷŷŷŷŷŷŞŋŀķġĵłłŀĥĭņŜşűŷţĶĚņŝŝŝŝ",
"ŃŖŝŝŔĹĹŎŦŷŷŷŷŷŷŷůœĳĥĦĿŌŇĹīļŒŝşűŷţĻĻŒŝŝŝŝ",
"ŀńŔŝŏĩŏŝŦŷŷŷŷŷŷŷŹŚıĢĵŐŢŞņļŎŝşŦŲŲŝŀřŝŝşťŦ",
"ńĞĻŔŒŃřşťŴŷŷŷŷŷŷŶŕĳĹĽŕŪŲşņōŚŢŴŶţŌńřŠşŤŶŷ",
"ŪĦęĩŃřŮŧŞŤŵŷŶŶŷŶŦĻĞĻŔūŶŷŲŠŉŉšŴŶŅįŗŝŭũŤŶŷ",
"ŲļĞģŁŝŲũŝŢŵŷŭŪŷŶŀĝĝļŘŮŷŷŷűŐņšųŨĹĬśŞŰūŤŶŷ",
"ųŃĢģŁŝŲŰťŠŨŴŪťŵũĻİŀŎŦųŷŷŷŷŞŋŏţłģĬŝũŴŪŤŶŷ",
"ŴōĦģŁŝŲŷűŦŦŬŤťŴŠŃŊŞŠųŷŷŷŷŷŭŐĲľĠġļşųűťšůŵ",
"ŷŠĲĤĻŗŭŵŷŷŶŤşŧŰşŃŊşţŴŷŷŷŷŷŷŕĠĖĘĽŜŠůŤŝŝšų",
"ŷšńĪġľŗŬŷŷŶŤŪŮşŝńŊţŴŷŷŷŷŷŷŷūŌĝĬŋŝŝŠşŞŝŠų",
"ŷšŇŁōŒņŕūŷŷŲŴůŞŝŗŘŤŷŷŷŷŷŷŷŷŵşĠįŌŝŠŮűŧŢűŶ",
"ŷšŇŉŝŜŐŊŅņťŪŪşŋśŝŝŤŷŷŭŮŷŷŷŷűřğįŌŝšŴŷűŮŷŷ",
"ŷšŇŉŝŝŝŉįĥĿŃŊŉľŘŝŝŤŵůŨŭŷŷŷŷŨŅĜįŌŠŨŵŷŷŷŷŷ",
"ŷšŃŃŘŜŝŋĽĴěĔģĵĽŔŜŝŤŵšŮŷŷŷŷŵŝĳęīŇŠųŷŷŷŷŷŷ",
"ŶŠıĥłŚŝśŎĹĵĞĘĤĻļŔŝţųšŮŷŷŷŶũŐĳėĖĪňšŲŷŷŷŷŷ",
"ŦŜįėĪŘŝŝŐĺĺŇŌŏőĽŒŝşţŞŮŷŷŶŧşŏĳėēĨŅŜţŰŷŷŷŷ",
"şŋĦēğņŘńĭħĸŔŝŝŖīŌŞŝŝŞŮŷŷŴœŉŊņīęĨŅŜŞůŷŷŷŷ",
"ŞĿĢęĦĹŊĬĝĳņŘŝŝŕĞŇŞŝŝŞŮŷŵŪŅŀœŢőĸĴļŅŚŰŷŷŷŷ",
"ŗĸĤĪĿŀŀĪĲŚŜŝŝŝŖĪņŚŞŢşŮŷŰŖĺōũŶŴŦŏĲġŔŬŵŷŷų",
"ľĠĬņŚŜŚŅńŜŝŝŝŝŜŗŃōťŲŢŮŸŪĻĢŏŴŷŷŵŧņĤŐśŧųŲŠ",
"ĽĳŇŘŢŮŢŉņŜŝŝŝŝŝŝŃœŴŶŲŵŷŤĤłŚŪŶŷŷŴťňĪĸńŎşņ",
"ļĺŐŤůŵŮśŃĹřŝŝŝŝŝŃŖŸŷŷŷŸŢĞōŝŧŶŷŷŷůřŃĻĮĬŃĨ",
"ĽŅŔŨŷŷŷŮŎĬŘŝŝŠťŝŃŖŸŷŷŷųŚĞōŝŧŶŷŷŷŲŦŞōĴģħė",
"ŀŖŝŨŷŷŷŷŠľŎŚŠũŴŠŃŐůŷŷŷŭŎĝōŝťųŷŷŷŷųššŒĵěĚ",
"ŁŖŝŨŷŷŷŷšĶğŌŪŶŴŞŁĹŊŲŵŶŪŊĜōŞşťŴŷŷŶŲŢŮũŒĺķ",
"ŁŖŝŨŷŸŷŷūŐĸœŬŸűņĥĩļŇŞţŇĞĘōũŲųŶŷŷŰťŰŶŵŪœľ",
"łŖŝšŧŨŴŷŮŘļıŎũşĪėęħĹńňıēęŎŭŷŷŷŷŷůşŦŲŷŴŪœ",
"ŃŖŝšŤşũųűŠĽĦıŁļĤĖĠĵņŇŇıēĖĶŚűŷŷŷŷůşŦŲŷŷŶū",
"ńŖŠūŲţŞŭŷŬĿĹĥēęĺĪŀţŢŢţŇĢġĘľŧŶŷŷŷŰŦŴŷŷŷŷų",
"łŕūŶŷųţŬŷŭłĽħĕěŒŚŧŶŶŶŶŪŚŔģľŧŶŷŶŶŷŵŷŷŷŷŵţ",
"ĿŀŢŷŷŵţŭŷűřŖŃħĜŕŬŴŷŷŷŷŵŭřĥľŦŶŵŨŭŷŷŷŷŷŷŴš",
"ľĺŖŮŷŶůŲŷųŠŝŖļĜŕŰŷŷŷŷŷŷŲŚĤģŅŦŧŠŬŷŷŷŷŷųťŌ",
"İķŐŤŮŶŷŷųŪşŝŝŏķŘŰŲůŶŷŷŷŲŜĺĠģŃŚŝťůŷŷŷŲŤŋį",
"ĞĳŊŘţŵŷŴŪŞŝŝŝŝŜŞūŧŤŷŷŷŷųŤŝıēĞŇřŝťŶŷŷūőİĘ",
"ĩĶĺŇŜūůťŜśřŘŜŝřśŚŗśŬűŶŴŰůşĶĝĝġņŗšűŰŭšŃėĜ",
];
bMat = [
"ĬŉŒŕšźŽŸŪŚŚŭŴŴŮŉŒŚśŤŸżŽŽżŵōĭĦıľłōššŒŇľıĦ",
"ĩŃŋŋŔůŲŦŖŎŞŭŲŲūŁĹłŋŌśūŲŲűŢŀĢĝķĺıĮĹĹĮĲĺķĚ",
"ĲŅŋŋŔůŲśŏśŰŲŲŲůřĶĹŌŋŌŤųůŤňİġĤŇŔńıĩĥįĿŋňī",
"ĵŅŋŋŒŪŭŘřűŲŲŲŲŲŰĿĹŊŇŇşŮŦŋığĠĳŊŧŠńĩĚĺŌŋŋŊ",
"ĵŅŋŋŌŎŎŌŚűŲŲŲŲŲűĿĹńĮĭłŎōňıĩĵňōŨűŘĪĚĻŋŋŋŋ",
"ĵŅŋŋŋŉĬĺŚűŲŲŲŲŲűŐĺİĪĝĩĳĳıĠĤķŊōŨŲśĪĚĺŋŋŋŋ",
"ĵŅŋŋŅııŀŚűŲŲŲŲŲűŦņĦĠĠıĻķĪģİŁŋōŨŲŜĭıńŋŋŋŋ",
"ĳķŅŋŁģŁŋŚűŲŲŲŲŲŲŴőĥĝĨĿőŐĶĭĽŋŎŘūūŒıņŋŋŎŗŘ",
"ĺĝıńŀĳŉŎŖŬŲŲŲŲŲŲůŋħĪĮŅşŪŐķĽňœŭŲřĽĴŇŐŎŕűű",
"ťĦęģĳňťŚōŕŮŲűűŲŲřĳěĭŃŠŰűŬőĹĹŒŮŰŃĪŇŌţŝŖűŲ",
"ŭĳĚĞĲŌũŜŋŒŮųŢŞŲŰļĜĚĭņŤŲŲűũńķŒŬŜĳħŉōŦşŖűŲ",
"ŮĸĝĞĲŌŪŧŘŎŜŭŞŗůŞĲĨĵľśŬŲŲŲűŒĺĿŖĺĠħŌŞŭşŖűŲ",
"ůŀġĞĲŌŪŲŨřřŢŖŗŮŐĳĹŌŎŬŲŲŲŲŲţńĨĴğğĳŐŭŨŘőťŰ",
"űőīĞĭņŤůŲűŰŕŎřŨŎĳĹōŔŭŲŲŲŲŲŲŒĞėĘĳŊŐŦŕŋŋŏŬ",
"űŒĵġĞįŇšűŲűŖşťŎŋĴĺŔŮŲŲŲŲŲŲŲŢĿěģĻŋŌŏŎŌŌŐŬ",
"űŒĶĳĿŁĶŅşŲŲūŮŧŌŋŅŇŕűŲŲŲŲŲŲŲŮŚĠĥĻŋŏťũŚŒũű",
"űŒĶĸŋŊŀĹĺŃŚŝŞőĻŉŋŋŕűųţťŲŲŲŲŪŏğĥĻŋőŭŲũťŲŲ",
"űŒĶĸŋŋŋĸĤĠĵķļĸĮŇŋŋŕŰŦŜţŲŲŲŲŞĸěĥĻŐŜŮŲŲųŲŲ",
"űŒĴĴņŊŋĻĮħęĕĞħĮłŊŋŕůőŤųŲŲŲŮœĨĘĢķŒŬűŲŲŲŲŲ",
"ůŐĪğĲŉŋŉĽīĨĜĘğĬĭłŋŔŭőŤŲŲŲŰŜŁħėĖģĸŒŬŲŲŲŲŲ",
"ŘŋĩėĥŇŋŋľīīĹĿŀŀĭŁŋōœōŤŲŲŰśŎľħėĕġĵŋŔũŲŲŲŲ",
"ŏĻĢĕĝĶŇĹħĠĪŃŋŋņĤĽŋŋŋŌŤŲŲŮŅĸĺķģĘġĵŊōŦŲŲŲŲ",
"ŎİĝĘĠĪĺĦĜĬĶņŋŋŅĝĻŌŋŋŌŤųůŠķĲńŕņıĩĮĹŊŦŲŲŲŲ",
"ňīĞĢİİıģīŉŋŋŋŋņĦĺňōŒŌŤųũņĭĿŞŰůřĿĨğŅšŮŲűŬ",
"ĲĜĤķňŊňĵĵŊŋŋŋŋŊņĴļŖūœťųţįğŊŮŲŲůśĻĢŁŋŜŮŬŒ",
"İħĸŇŒŤŒĸĶŊŋŋŋŋŋŋĳŇŬűŪůŲşĢķŋşűŲŲŭŜļĦĬĵŁŏķ",
"įīĿŕťŰťōĶıňŋŋŋŋŋĳōŴŲŲŲųŞğŀŋŚűŲŲŲťŉķĭģĤĵġ",
"İĵŃśŲŲŲŤŃĦņŋŋŏŘōĳōŴŲŲŲŬœĝŀŋŚűŲŲŲŪŘōĽĪĝĠė",
"ĲŅŋśŲŲŲŲŘįĿňŏŜŮŐĳŅŨűŲŲŢŀĝŀŋŗūŲŲŲŲŭőŐłĪĚę",
"ĳŅŋśŲŲŲŲřĪĝľşűŮōĲīľŬŰŰŠĽĜŀŌŎŖŮŲŲűūœťşłĬĩ",
"ĳŅŋŜŲųŲŲšŀīłšųūĸğġĮĹŏŔĽĝęŀŞūŬűŲŲŨŗŨŰŮŠŃĮ",
"ĴŅŋőŚŝŭŲŤņĮĩńŜœĥėĘĠĪĴķĨĕęŁţųŲŲŲŲťŎřūŲŮşŃ",
"ĵŅŋőŖōŞūũœĮğĪĶĲĠĖğĭĶķķĨĕėįŐŨŲŲŲŲťŎřŪŲŲŰş",
"ĶŅŐŠŪŕōŢŲŦıĪğĕĘĭĤĸŔœœœĽĠĠęĵŚűŲŲŲŨřŮŲŲŲŲū",
"ĴńšŰűŭœŢŲŧĳĭĠĖĜŃŉŜŰŰŰűŠŊńġĵŚűŲŰűűŰŲŲŲŲůœ",
"ĲıŚŲŲůŕŢŲŪňŅĴġĜŅšŮŲŲŲŲůţŉġĴřűůśŤŲŲŲŲŲŲŮő",
"İīňťűűŦŬŲŬŏŋŅıĜņŧŲŲŲŲŲŲŪŊġġļřřŏŠŲŲŲŲŲūŘļ",
"ĨĪĿŕťűŲŲŬŞŎŋŋŁİňŧŪťŲŲŲŲŪŋĲĞġĸňŋŗŧűŲŲŪŗļĦ",
"ĞħĺŇŔůŲŭŞŌŋŋŋŋŊŋŠśŕűŲŲŲŬŕŌīĕĝĻňŋŘűŲŲŠŁĥĘ",
"ęĞĢĮŅşšŎŀľľľľľľľĿĿňšŢššŠŝŅĢĎďĔĳľŉŠŠŢőĲđď",
];
background(0,0,0,0);
noStroke();
for(var i  = 0 ; i < 40 ; i++){
    for(var j = 0 ; j < 40 ; j++){
        if(rMat[i].charCodeAt(j) + gMat[i].charCodeAt(j) + bMat[i].charCodeAt(j) < 1355 ){
            fill(rMat[i].charCodeAt(j) - 200,gMat[i].charCodeAt(j) - 200, bMat[i].charCodeAt(j) - 200);
            rect(10*i,10*j,10,10);
        }
    }
}


images.push(get(0,0,400,400));  // images[0] is wall tile.    

    
    
rMat = [
"ô÷÷ññôùĕČôññðïïïïðüüùððññïïððüûöòòòòñïóû",
"óñóñððóĀüóõóðïïïïïóõùùôññïïïïôþĉúúúúïïðó",
"ùññðððôôóóùõñðïïïïïñøùôððïððïõþćùùûýóðïï",
"Ćóñïïòüññôüùôñïïïïïòöññðïïðñîüúõññöüüóîï",
"õõþïïïðñðóûčČöýúõïïóúñññññðïîýøðñññïüýúï",
"ù÷÷ðððñññòõāĂöúöóóö÷÷ñññññðïïööõñðððõøùö",
"ööñððññññðïóöõõôôõùùöñññðððïðóöøñðïïïôøû",
"ñññïïïñññðïïðññõöòñõùññðïïïðñ÷÷õñðïïïô÷÷",
"ñññïðððñððïðôúùøüČôõóððððïõøôûûøññðïïñòò",
"ðóø÷ôðïøöðïïòôùúýĆ÷÷ýĉÿ÷ùïóûċûüùñññðïïñø",
"ðôýýöðîüùðïïïî÷ûýý÷øąėćûþîðûėûýùññññïïóü",
"ïðððññïüüùðïïî÷óððñóùúü÷ðýôðöððôüýöïïïïð",
"ðññññòôüùõùóîîûõñññôüüüûùüôóûðñòôùûúïïïï",
"ùóññôõõüúöûôñôøóñõñôúüüüüüôòøõóððõúüòñðð",
"Ĉ÷ññøúñüüû÷óõýïïòüññõüüüüüôïîý÷îïðô÷÷óññ",
"ïñññðóüüùðñïôüýýýýñõýüü÷ððùûòðïôýúùüüõññ",
"óóïðòõùöôññðõýööööñóøüùóðôø÷òðïñöĂăüüõðñ",
"ôõòðöúúñññððôùñññðððò÷öõóúú÷ñðïððĀĂøø÷öö",
"ó÷÷ñøüýññðïïðñññðïïððï÷ûøüüúòñðïïôôññùüü",
"õøòõøøõðññððïïñððïïïðïòāĐüýúñññðïööññó÷ü",
"÷óñò÷ùñùøøùóïððïïðïïïððùăõõöøøõïïø÷ñðïñó",
"öðñïøûñýüûüõïñïïïñïïðññô÷ññôüü÷îïø÷ðïïïï",
"øýýïððïðüĐüùõñðøúðïðññðõýñññðüüùðøüýðððï",
"÷÷ôñññññõüôóôõùöóïïïðïïõýñðïïóõùùûøóúú÷ï",
"ùöññññññòôóóöúùôðïïïïïïõýõñïïïòøùùõðøøöï",
"üøññðïñññó÷÷ùýñññïïïïïïõüüôïïïòõññññïððï",
"üøðñññïïóûñøýüýöñññðïñõúýðùúðïôúñññññðïï",
"ööø÷ôððïñõñöøööóñðïïñôöööñùûô÷ùùñññññðïð",
"ñôøü÷óñððððööññññðõôõ÷øöññõöôøúúöòðððððð",
"ññðûùöññðïï÷øññññðüú÷÷û÷ññðïïñõýýõïïïïïï",
"ñññôööñññóùû÷ðññññõ÷üû÷ñïññðïðñýĐĂùúððïï",
"ñññïôöòððñôùûùððððïðõøùøøùóïïïïõāùóóñðïð",
"ñññïôöòïïðñøüüïïïïïïñ÷ûüüüôîïïïñ÷óðïñðïñ",
"÷ðïïôöòñðïïïĀęïôöñïïñ÷óðïüüúñðôüüúõòïðñï",
"ôðïï÷ûûïïïïïõĀðòôúîîòûõððøøùúúøôôøøõðïïï",
"õóïïõùüôóïïòöúóòôüòó÷üøôóùùùøùöñð÷ĀĄóôóò",
"ø÷ïïðôûüøïï÷üü÷óôû÷ùüüüú÷üüúòññðï÷ĉĘ÷ûû÷",
"÷ðññðïî÷ùþþöðïüùõððòóîïăĜüýúñññññïôû÷÷õñ",
"óðððïïî÷öõõóðïüĆĆöøÿąõòùąõõöøøõïðïñôóóóô",
"ñðïïïïîú÷ññññïöăĆøúÿāõòñóððò÷üúóïïòõöòöą",
];
gMat = [
"ŔŞŠŇņňōŷůŗŉňĿĲĳĳĸńŐőŉĵŀňňĳĳĸŅőŗřňŇŇňņĹĺŎ",
"ŉŃŎňľļņŧŞŐřŎĽĲĳĳĴĸĻņŗŊňŇŉĳĳĴķŊřŨŏŏŎŐķĴĵĻ",
"ŒłŇŁĸĸňŗőŌŚŔŅĹĳĳĳĳĲłŜŏŊńŁĳķĸĲŋŘŧŏŎŏœļĶĳĳ",
"ŪŕŇĴĳĺŐŇŇŊőřŕŇĳĲĲĳĳłŚňŇľĲĳŀŃĲŒŗřňŇŌőŐļĲĳ",
"ŉŊŕĳĲķŅŇŀĹŐũŰšœŞŗĵĲļŎŇŇňňňĹııœōŅŇŇŇņŒœŊĴ",
"ŒŌōľľŀņŇńľŁŖŤŠřŔŐŋłŊŔŇŇŇňňĺĲıŌŋŊŇŁļļłőœŃ",
"ŒŊŇŀŀŁņŇňŁĳĽōŖŖŒőŗōŒŕňŇńĿĿķĵĹőœŒňĺĲĳĳőŞŗ",
"ŇŇŉĳĳĸŅŇŇŁĴĳĻŇŇŗŚŉŇŋŎŇŇľĳĳĳĹŅŠŠŗňĻĳĳĳŐşş",
"ŇŇňĲĻŀĹŇłĶĳĻňŐōřŢŪŗœňŅņńŁĳŁōŖŕŖőŇŃĺĲĳļŅŎ",
"ŀŁŏņŇŃĲŎŉĻĳķļļŚŗŘşŠřŔťŗōŐĳłŕůŏőŎŇŇńŁĳĲĹŌ",
"ļľœŒŋłĲŒŎŁĴĳĳİşŖőŐšŚŜŹšŐŔĲŀŕŸŐŒŎŇŇŇŉĳĲĻŐ",
"ĳĻŇņŇŃĵŒŒŉĶĴĳİŞŏņņņŎśŏŐōņœĽĽŜŅņŊőŒŃĳĳĳĸŅ",
"ŁńŇŇŇŊŔőŏŉŉļĲİŕōŇŇŇŌŔőőŐŎőŇŇŕņŇŉŊŏōŊıĲĴķ",
"őŉŇŇŉŎŗőŏōŖņĺĽŇŃŃŊŇŉŏőőőőőņłņŋŇŀŀŉŒŘłĽĺĺ",
"ŢŌŇŇōŏŇőőŕşőŊœĳĳĺŐŇŇŊőőőőőĽĲıœņĲĳĿœŠşŏņŇ",
"ŅņňňņňőőŎŅņĹľŒœœœŒŇŋŒőőŌņņŎőŉŇĿļœśřŐŐŊŇŇ",
"ŏŋĺĻŋŖŚŋŊŇňłņŒŌŌŌŌŇŉŎŒŎŉŅŕŘŕŉĻĸĻŋššőőŊņŇ",
"őŖńĻŏśśņŇŅĿĿŅŎŇŇŅĿĿłŇŅňŎŐŚŚŕŉĺĸĶľŜşŌōŌŋŋ",
"ŋŠšňŎőőŇŇŁĴĳĻŇŇŇłĴĳĺŁĲŅřŢőőŎŇŇŀĲĲŎŔņŇŎőő",
"ņŔōřśŘŋņŇŅŁĹĵķňľķĳĳĵķĲŀŜŴőŒŏŇŇŅĽĳŉŏŇňŊōŒ",
"ŉŉŇłŏœŇŎŎŎŏľĸŁĺĵĶŀĳĳķŀńŖŪŊŊŋŎŎŇķĳŅōňĹĹĺĽ",
"ŌņňĳņŐňŒőŐŒľĹŉĳĲķňĲĲĸŇŇŒŢŇŇŊőőņıĳņōňĳĳĳĳ",
"ŎŒœĵŀŃĳŇŖůőŚŗŉĵňŋĴĳĺŇņĹĿŒŇņņŅŐőŊĵņŒœĴĵĴĳ",
"śŕŉłņŇłŇőşŊŋŒśŊŊńĴĳĵĸĸĴŀŒŇĽķĸĺŇŗŊŏŎŉŋŋńĴ",
"ŚœņŇŃŁŇŇŌŕŐŏŔŜŎŊłĴĳĳĳĳĲŁŒŊĻĲĳĲŃŜŎŎŊŇŇŌŇĴ",
"őōŇŇĺķŅŇņŎŞşřőŇŇłĴĳĳĳĳĳŁŒőĽĲĳĳŃřŇŇŇňĳŁłĴ",
"őōņŇňŃĳıļŐŅŋőőŒŋŇŉŉŁĸŇŘśŒņŏŋĳĲĽŎŇŇŇŇňĹıĲ",
"ŋŌōōŉńŀĲĺŌŇŒŔŋŋŉńļĺĻŅŔŜŗŋŇŎőŏńŉŎŇŇňňŇĺĶĿ",
"ŇŉōőőŏŉĻļĿľŏŒņŇŇńļĿŅŖşŜőņŇņŇōōŏŐŋńľĿĿķĶľ",
"ŇŇņŐŚŚŉŇŁĲĳŅŎŇŇŇŇŇŒŖşşŖŋņŇĺĲıŇŊŒœĿĳĴĳĳĳĳ",
"ŇŇŇŊŘŚŉňņńŉŎōņňňňňŋŏŖŕŎŁĶŇńľĳĹľŖŭŗňŊŁĸĲĲ",
"ŇŇňĹőśŊĹĹľŊŎŐŏĹĹĹĹĹĹŅŚœŋŇŎŁķĳĳĴŇŧŖŃļŇĹĶŀ",
"ŇŇŉĳŏśŊĲĲĹŇōőŒĳĲĲĳĳĲŀŞŗőőőĽĲĳĳĲŀşŐļıňĹĸŇ",
"ōľıĳŎŚŉŇŁĲıļśžĵőŗĸĳĲŀŝŐņņŒŔŌķĵŀŒŏŚŖŋĳŁłĳ",
"őľĲĳňŔőĶĶĳĳĵŊũłŉŌŌııļŔŌņŅŜŝŘŋŋŊŉŊŐŗśŁĺĵĲ",
"őŁĲĳńŏŒĽĻĲĳĺŊśŐŊŉŒŃŁńŐōōŏŚŚŗŎŎŋńĿŊŝŪŐńĿŃ",
"ōņĲĳĿŉŐŒŉĲĳŅŒŐşŐŉŏşŚőŐŐŘšőőŎŇŇŇŁĳńŤŹşŖŕŞ",
"ŌŇŉŉĺıĮšŜœŔŌņņŐśŚŇŅŏŒİļŞžőőŏŇŇŇňŉĺĿŏŠšřņ",
"ŉłĺĻĶĳİšřŊŋŉŁĸŒťŪŘŌřŧŐŊŗŭŋŌŌōōņĹĻĶĸĽŐŐŒŕ",
"ŇĿĲĳĳĳıŚœņŇŇłĻŃŚŦŠŗśŞŕŇŃŌľľłŌőŋļĳĳĹŀŋňŐũ",
];
bMat = [
"ƎƝƟżŻƁƓƞƞƔžżŸŴŴŴŶŹƗƗƎŶŹŻŻŴŴŶŹƗƚƔŽżżżŻŶŽƔ",
"ƈƀƆŻŸŹſƠƗƈƕƆŶŴŴŴŵŶžƈƙƏƂźżŴŴŴŵƂƌƛƐƐƐƑŵŴŷŽ",
"ƏŽźŹŶŸƂƓƋƃƜƐſŶŴŴŴŴųƂƜƏƃŹŹŴŶŶųƄƎƚƏƎƓƙſŸŴų",
"ƞƐźŴŴżƗŻŻƃƖƜƏźųųųŴŴƃƖżŻŸŴŴŹźŲƘƚƔżŻƉƘƖſųŴ",
"ƅƄƝŵŴŵŹŻŸžƖƜƟơƙƠƗŶųſƐżŻŻŻŻŷųŲƙƌŸŻŻźŷƘƙƏŵ",
"ƒƉƊŸŸŹŻŻźżƄƓƞƟƜƑƊƋƇƎƒżŻŻŻŻŷŴųƈƈƅŻŹŷŶƅƔƖƇ",
"ƏƅźŹŹŹŻŻŻŹųƁƎƑƑƋƊƑƍƓƓżŻźŹŹŶŵŶƉƐƑżŷŴŴŴƐƞƛ",
"ŻŻżŴŴŶźŻŻŹŴŴŷŻŻƓƗŽŻƅƏżŻŸŴŴŴŷŹƠƟƓżŷŴŴŴƐƞƝ",
"ŻŻźųŷŹŷźŹŵŴŷƃƐƎƙƜƔƔƎſźźŹŸŴƅƐƓƚƚƐżźŷŴŴŽƃƅ",
"ŹſƎƋƁŹųƎƇŶŴŶŻƀƜƛƚƚƟƙƍƑƏƍƏŴƀƍƞƖƗƎŻŻźŹŴųźƋ",
"ŷƂƚƙƆŹŲƘƎŷŴŴŴűƞƛƘƘƠƜƙƞƛƗƛŲŸƅƝƘƙƏźźŻżŴųžƗ",
"ŴŶźŹźźŴƘƘƎŷŵŴűƞƇŸŹŹƅƞƗƗƊŸƙƀžƞŸŹƃƗƙƈŵŴŴŶŹ",
"ŹźŻŻźƀƒƗƐƄƎſųŰƚƆźźŻƅƚƗƗƔƏƗƃƁƚŹźŽƂƐƔƐŲųŴŶ",
"ƆƁŻŻƁƈƒƗƑƊƚƅźƀƋſŻƄŻƁƑƗƗƗƗƗƃŽƋƄƀŸŸƅƔƜƂźŷŷ",
"ƛƌźŻƍƒŻƘƗƙƟƊƆƚŴųŽƗźźƃƖƗƗƗƗƀųŲƙƊųŴŸƌƟƞƇźŻ",
"ŸŹŻŻŹſƖƘƎŷŹŶƂƘƚƚƚƚźƅƚƗƘƊŸŸƎƓŽŹŶƀƙƟƜƖƖƄźŻ",
"ƆƅŵŷƆƒƛƇƄźŻŹƅƚƈƈƈƉŻſƍƘƎƀŸƏƗƓŽŷŵŻƇƖƜƘƘƄŹź",
"ƎƖƅŷƎƝƞźŻźŹŹƁƎŻŻźŸŹŹſƉƇƇƈƜƜƓŽŷŶŵŸƐƖƋƌƈƆƆ",
"ƋƟƠŽƍƘƘźŻŹŴŴŷźŻŻŹŴŴŶŹųƉƛƟƗƗƐżŻŹŴųƎƎźŻƎƘƗ",
"ƈƔƄƕƚƗƆźźŹŸŶŵŶŻŸŶŴŴŵŶųŽƐƟƘƙƐŻźźŸŴƋƌźŻƁƉƘ",
"ƈƀŹƂƒƓŻƎƎƎƎſŵŹŶŵŵŹŴŴŶŹŹƋơƄƄƇƍƎƅŵŴƊƊŻŶŶŸſ",
"ƈŹźŴƋƓŻƙƘƗƘƂŵżŴųŵŻŴŴŶŻŻƋƢŻźƂƗƗƊŲųƊƊźŴŴŴŴ",
"ƌƙƙŵŸŸŴŹƅƞƕƛƑŽŶƌƐŶŴŶŻŻŶƃƙŻŻźŷƖƗƏŶƋƘƙŶŶŶŴ",
"ƚƒƁźźŻźŻƆƘƂƂƋƗƐƇžŵŴŵŶŶŴƄƚźŷŶŶŽƉƚƐƕƍƀƐƐƈŵ",
"ƜƏŹŻŹŹŻŻƂƐƈƇƐƞƎƁŹŴŴŴŴŴųƄƙƅźųŴųƃƛƎƎƄŹƌƍƇŵ",
"ƗƌźŻŷŶŻŻźƅƝƞƛƙŻŻźŵŴŴŴŴŴƄƘƗƀųŴŴƄƕżŻŻŻŴŹźŴ",
"ƘƌŹźŻźŴųƀƒŹƊƘƘƚƆźżżŹŶźƒƞƚŹƏƑŵųƀƏŻŻŻŻŻŷųŴ",
"ƇƉƌƋƀŹŸŴźƅŻƏƔƆƇſźŷŶŶſƎƙƔƇŻƎƗƏƉƏƎŻŻŻŻŻŷŵŸ",
"ŻƁƋƗƏƆżŷŸŸŸƍƏźŻŻźŷƃƅƐƞƝƍźŻƄƊƍƌƐƒƇžŸŹŹŵŵŸ",
"ŻŻŸƕƜƗžŻŹŴŴƊƌźŻŻŻŹƘƙƟƞƚƉźŻŶųųźƄƘƘƃŴŵŴŴŴŴ",
"ŻŻźƃƕƗžŻźƀƎƔƋŹŻŻŻŻƃƋƛƙƋŻŴźŹŸŴŶźƌƜƔƎƑŹŶŴŴ",
"ŻŻŻŵƐƘžŶŶźƃƏƔƐŶŶŶŶŶŸƇƛƔƍƌƏſŵŴŴŴƂƞƏƁſŻŷŵŹ",
"ŻŻżŴƏƘžŴŴŶźƌƘƙŴųųŴŴųƀƝƛƘƘƗƀŲŴŴųƀƞƈŶųŻŶŶŻ",
"ƉŷųŴƎƘƀŻŹŴųŷƉƣŵƐƖŹŴųƀƝƈŸŷƘƚƑŹŶƂƘƔƜƐžŴŹŹŴ",
"ƋŶŴŴƌƙƓŴŵŴŴŴƆƢŹſƆƐŲŲžƘƆŹŷƝƝƚƑƐƋƁƁƐƘƘŸŶŴų",
"ƋžųŴƄƐƘƁŽųŴŻƍƞƉſƁƗƃƂƇƗƌƆƇƜƜƘƎƍƆŹŸƋƜƠƈƃƁƃ",
"ƋƊųŴŸƁƔƘƍųŴƉƘƖƞƈƁƔƞƜƗƖƖƚƟƗƗƐżŻŻŹŴƉƛƞƞƚƙƝ",
"ƈŹżżŷųůƠƝƚƛƇŸŷƖƞƗźŷƅƒűŵƊƟƘƘƐżźźŻżŵƄƘƟƠƕŹ",
"ƀŹŷŷŵŴűƟƗƅƆƀŹŴƘƝƛƑƌƓƛƐƃƋƢƆƆƈƍƌƄŵŷŵźƀƈƈƋƐ",
"ŻŸŴŴŴŴűƜƑŹŻŻźŶƇƔƜƞƛƗƎƏƁƀƍŸŸżƉƘƑžŴŴżƄƇžƄƝ",
];

noStroke();
for(var i  = 0 ; i < 40 ; i++){
    for(var j = 0 ; j < 40 ; j++){
        fill(rMat[i].charCodeAt(j) - 200,gMat[i].charCodeAt(j) - 200, bMat[i].charCodeAt(j) - 200);
        rect(10*i,10*j,10,10);
    }
}


    images.push(get(0,0,400,400));   //images[1] is grass tile.
    
    
    //draw food :- 
    background(0,0,0,0);
    fill(235, 0, 0);
    ellipse(197,205,190,200);
    fill(0,225,0);
    pushMatrix();
        translate(200,200);
        beginShape();
            curveVertex(-46,-87); 
            curveVertex(-1,-97); 
            curveVertex(43,-83); 
            curveVertex(86,-50); 
            curveVertex(46,-50); 
            curveVertex(39,-16); 
            curveVertex(0,-42); 
            curveVertex(-40,-12); 
            curveVertex(-54,-43); 
            curveVertex(-92,-45); 
            curveVertex(-46,-87); 
            curveVertex(-1,-97); 
            curveVertex(43,-83);
        endShape();
    popMatrix();

    images.push(get(100,100,200,210));  //images[2] is a tomato
    
    //draw the goal :- 
        
    fill(0,255,0);
    rect(0,0,400,400);
    noStroke();
    fill(255, 255, 255);
    for(var i = 0 ; i < 10 ; i++){
        rect(40*i,0,10,400);
        rect(0,40*i,400,10);
    }
    images.push(get(0,0,400,400)); //images[3] is the goal
    
    
    //Turtle Position 1 :- 
        //background.
    background(0,0,0,0);
    noStroke();
    
    //Turtle Head :- 
    fill(74, 122, 35);

    ellipse(200,73,50,90);

    fill(0, 0, 0);
    ellipse(197,36,7,3);
    ellipse(203,36,7,3);

    fill(255,255,255);
    ellipse(190,53,10,10);
    ellipse(210,53,10,10);
    fill(0,0,0);
    ellipse(191,51,6,6);
    ellipse(209,51,6,6);


    //Flippers
    pushMatrix();
    translate(198,215);
   // rotate(this.angle);
    noStroke();
    fill(74, 122, 35);
    beginShape();
        vertex( 28,  - 105);
        bezierVertex( 71,-121,196, -12,   165, - 76);
        bezierVertex( 108, -160,21, -160 , 28, - 105);
    endShape();
    popMatrix();
    
    pushMatrix();
    translate(171,370);
       // rotate(this.angle);
    noStroke();
    fill(74, 122, 35);
    beginShape();
        vertex( 28,  - 105);
        bezierVertex( 71,-121,196, -12,   165, - 76);
        bezierVertex( 108, -160,21, -160 , 28, - 105);
    endShape();
    popMatrix();
    
    
    
    pushMatrix();
    translate(208,215);
   // rotate(this.angle);
    noStroke();
    fill(74, 122, 35);

    beginShape();
        vertex( -28,  - 105);
        bezierVertex( -71,-121,-196, -12,   -165, - 76);
        bezierVertex( -108, -160,-21, -160 , -28, - 105);
    endShape();
    popMatrix();

    pushMatrix();
    translate(229,370);
   // rotate(this.angle);
    noStroke();
    fill(74, 122, 35);
    beginShape();
        vertex( -28,  - 105);
        bezierVertex( -71,-121,-196, -12,   -165, - 76);
        bezierVertex( -108, -160,-21, -160 , -28, - 105);
    endShape();
    popMatrix();

    
    //Body 
    fill(99, 209, 25);
    ellipse(200,200,200,250);
    fill(74, 122, 35);
    ellipse(200,200,175,207);
   // images.push(get(100,0,200,400)); //images[4] is the TurtlePosition1
    images.push(get(0,0,400,400));

    //turtle position 2 :- 
    background(0,0,0,0);

    noStroke();
    
    //Turtle Head :- 
    fill(74, 122, 35);
    ellipse(200,73,50,90);

    fill(0,0,0);
    ellipse(197,36,7,3);
    ellipse(203,36,7,3);

    fill(255,255,255);
    ellipse(190,53,10,10);
    ellipse(210,53,10,10);
    fill(0,0,0);
    ellipse(191,51,6,6);
    ellipse(209,51,6,6);

    pushMatrix();
    translate(198,215);
    rotate(toPI*15);
    noStroke();
    fill(74, 122, 35);
    beginShape();
        vertex( 28,  - 105);
        bezierVertex( 71,-121,196, -12,   165, - 76);
        bezierVertex( 108, -160,21, -160 , 28, - 105);
    endShape();
    popMatrix();
    
    pushMatrix();
    translate(171,370);
    rotate(toPI*9);
    noStroke();
    fill(74, 122, 35);
    beginShape();
        vertex( 28,  - 105);
        bezierVertex( 71,-121,196, -12,   165, - 76);
        bezierVertex( 108, -160,21, -160 , 28, - 105);
    endShape();
    popMatrix();
    
    
    
    pushMatrix();
    translate(208,215);
    rotate(toPI*(-15));
    noStroke();
    fill(74, 122, 35);
    beginShape();
        vertex( -28,  - 105);
        bezierVertex( -71,-121,-196, -12,   -165, - 76);
        bezierVertex( -108, -160,-21, -160 , -28, - 105);
    endShape();
    popMatrix();

    pushMatrix();
    translate(229,370);
    rotate(toPI*(-7));
    noStroke();
    fill(74, 122, 35);
    beginShape();
        vertex( -28,  - 105);
        bezierVertex( -71,-121,-196, -12,   -165, - 76);
        bezierVertex( -108, -160,-21, -160 , -28, - 105);
    endShape();
    popMatrix();

    
    //Body 
    fill(99, 209, 25);
    ellipse(200,200,200,250);
    fill(74, 122, 35);
    ellipse(200,200,175,207); 
   // images.push(get(100,0,200,400)); //images[5] is the TurtlePosition2
    images.push(get(0,0,400,400));

    
    //Turtle Position 3 (inside Shell)
 
    background(0,0,0,0);
    noStroke();
    
    //Body 
    fill(99, 209, 25);
    ellipse(200,200,200,250);
    fill(74, 122, 35);
    ellipse(200,200,175,207); 
    images.push(get(0,0,400,400)); //images[6] is the TurtlePosition2
    
    

    
rMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǂǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇưǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƓŸǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǅǅŪưńǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƼŚƷƒƑƙƗǇƌƜƦƘŽŦŪŎŁŴƐǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƜźƈƇƂƞǄŷŵſƄƂŴŌăĭĸǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƈǇƼƥƛǆƽƩƎƃƭƸƥƶƆĬİŀĳǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇƸƶưǇǇƷƕƪƩǀƔŵǁǅǇƭƾǇǆǅƺůćıęƮǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇŹƨƬƽǇƊƷǃǃǅƺƧƑžƲƥǇưƺǃƾƩŢĥŘĆļǇǇǇǇǇ",
"ǇǇǇǇǇƻŗƟƾƛƪƦƤƹǆƲƢƳǆǄƹǆǇƨưƯƶǂǂƹƍƆĄĥŘƛǇǇǇǇ",
"ǇǇǇǇǇǇǇƫƁǇǇǇƕǀƗƛǇǇƧǃǄǄǃƱƭǆƼǁƿǅƕħğċğƆǇǇǇǇ",
"ǇƋƯƋƆǇǇǇǇƿǇǇǀƻƵǇưƪǅǃǇǇƿǄǁǃǄǅǅǁƑƫŲœńǇǇǇǇǇ",
"ƅƹƒƪƑǇưǇǇǇǇǇǇƖƚƹƫǀǄƭơǃƿǆǅǃǄǅǄǃƽŨĩĕŊǇǇǇǇǇ",
"ƲƅƨƺǆƱƽƠǇǇǇŷǇǇƌƮǀƧƎǇƫƼǄƾǇǄǃǄǃǃǇũĩŰþǇǇǇǇǇ",
"ǇƭƪǇǇƽƈƥƚǇŽŰƀƢǇơƯǆƳƲƺƷƾǇǇǃǅǆǇǆƗŲţĜŘǇǇǇǇǇ",
"ǇǇǇǇǁǄǇƏƑŷǇǇŬŬŝƁǇƯǄƾǃǂƷƥƸǆǇǅƵƽƳģġĊƙǇǇǇǇǇ",
"ǇǇǇǆƂƯǇǇǇǇŢƎźǇǇǇǇǄƩƬƫƫƲǃǁƿƹǃǂƢŽŗĘłƨǇǇǇǇǇ",
"ǇǇǇǃƐǇǇǇǇƴŻƐƳžǅǇǇǇǇǇƠƏǇǀƴǆǇǂƾǁŒţŗńƩǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇŸǂƞƿƌǇǇǇǇŶƺƦǆƾƷƶǅƵƼƒŮĩŔĪƨǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǃƶǇǇƴƝƝǇǇǇǇǇǇƫƥǇƟƚƋŽƨųŸŻƐŶǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƁŭƲžųƅǂǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƮǇŨǆǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
gMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƿǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƦǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŹřǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǆǇǇǇǇǇǇǇǅǅıƬĜǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƵįƮƊƋƃſǇŬźźŶŒĩĳĕġŐŶǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŷěēėĠŦƺĲĸıĒķĸĨāĕĜǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŽǇǅƝŔŗőřĦĽįŝıĲĨěĩĚĎǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇƝƞƓǇǇơġĬĠơŵĥũŲƛōōŤƆŢľŅĎĕûƙǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇīįĬưǇĢĹƆŗƏťġĞģŐţƖŪŢŽƝŨĸġĶøċǇǇǇǇǇ",
"ǇǇǇǇǇƶĥŷĺŚƋůŘŗƇĺċŊŵƉřƄƗŤřŪŶƁƆŷšşēČĠƌǇǇǇǇ",
"ǇǇǇǇǇǇǇŹĮǇǇǇčŌĝŖǇǇęšƋƈųŀŢƢƑƨƨưŢěđúĔūǇǇǇǇ",
"ǇľƐŅŅǇǇǇǇƻǇǇƲƥƤǇōĹžŵƚƊƜƭƎƦƻƼǀƩžžşŇĕǇǇǇǇǇ",
"īƟŗİłǅƗǇǇǇǇǇǇİĎſľťŷŀŖűŠƌƙƫƼǁƾƳƊņĨċĕǇǇǇǇǇ",
"ƙĜįļǇƙĺŷǇǇǇŃǇǅĔĥŌİĭǇĠžƧƝƔƲƷƺƷƷƘŠĤŃêǇǇǇǇǇ",
"ǇƀŹǇǇƵĦĪĥǂšĩĚġũŉńűłĤŷŘůŭŨƖƭƯƳƠůřŎĠħǇǇǇǇǇ",
"ǇǇǇǆƼƿǇĬĴēǇǇĻĲĤűǇĻƇųƃťŒĚŁſŷŮŵźŭĎĜûƗǇǇǇǇǇ",
"ǇǇǇǆĹŒǇǇǇǇńŉĨǇǇǇǇƺĠīĩģĲŒůŲŞűƚūŗŁĄďƜǇǇǇǇǇ",
"ǇǇǇƾĸǇǇǇǇƯŋĢĵĖǄǇǇǆǇǇƅĶŤŽŁŞŪƗŲŞğŚİēƛǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇČƴūĻĠǇǇǇǇţƖĝśŋƚłůłĻğğĝĠāƞǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǂƱǇǇƜŮŪǇǇǇǇǇǇŴţǇƉŶķĐğĩęŲŻŨǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇĭīƈįĸĵƾǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇơǇŀǅǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
bMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƾǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƣǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŜńǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǆǇǇǇǇǇǇǇǄǄąƦîǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƵĚƯźŻƃžǇŜŸŘŚĿėĐñóĜŨǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŨøàßüŏƶóððÚĕĥāîÿ÷ǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŶǇǅƗĀØàõùėãâÝóĂüĆéĄǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇƏƑƇǇǇƘÔ×ÈƙŸÿêþąĀçöġĊĂĎĆíÛƍǆǇǇǇǇ",
"ǇǇǇǇǇǇǇǇĆéëƪǇìàöæÿÛðñĂíīįćĘĠıđĹĄąèâǇǇǇǇǇ",
"ǇǇǇǇǇƴĐŧÍĿſœĒðñØËĘôîñ÷ĈīĥĽőŁŗńŎĶüïèŷǇǇǇǇ",
"ǇǇǇǇǇǇǇŝčǇǇǇÕäÛıǇǇÖäÿüï÷ĮŭŲƇƎųŕďĐþøĻǇǇǇǇ",
"ǇĞƂīħǇǇǇǇƻǇǇƬƜƝǇħ÷÷èĘĜľŘŇżƫƭƹƏŠłīčèǇǇǇǇǇ",
"ĂƑłËĔǃƍǇǇǇǇǇǇÿÐŨßñõďĀĆýķŌƄƮƺƲƜśĹĦöØǇǇǇǇǇ",
"ƎåëüǇƐÜũǇǇǇĘǇǄÚßåàöǇÖĈĤķňŸƘƤƔƐŐġĦøÙǇǇǇǇǇ",
"ǇŦŚǇǇƲÞëîƿŋĉá×ëýàìÛÒāñĊāüŃŸƄƉŽľĝģąàǇǇǇǇǇ",
"ǇǇǇǆƺƼǇõāéǇǇĚęĖŦǇÕûÜöãèßîĠĲĿŃīĦĐûóƗǆǇǇǇǇ",
"ǇǇǇǆěĖǇǇǇǇĨĭĈǇǇǇǇƹÈ×ÙãâæèäùĜļėđĸëĄƊǇǇǇǇǇ",
"ǇǇǇƼČǇǇǇǇƭıäêèǄǇǇǆǇǇŴèîæÙòÿıĄĐāöÿàƋǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇÛƫŕõæǇǇǇǇŊƆÝéÜƍăõàúéìċêìƉǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǁƮǇǇƒŜŕǇǇǇǇǇǇřňǇűņåÜäãâŅŎřǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇìôŬíþÛƸǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇƒǇãǄǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];

background(0,0,0,0);
noStroke();
for(var i  = 0 ; i < 40 ; i++){
    for(var j = 0 ; j < 40 ; j++){
        if(rMat[i].charCodeAt(j) + gMat[i].charCodeAt(j) + bMat[i].charCodeAt(j) < 1355 ){
            fill(rMat[i].charCodeAt(j) - 200,gMat[i].charCodeAt(j) - 200, bMat[i].charCodeAt(j) - 200);
            rect(10*i,10*j,10,10);
        }
    }
}


fireImages.push(get(0,0,400,400)); // fireImages Image 0


rMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǂǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇưǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƓŸǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƍƹǇǇǇǇǇǇǇǅǅŪưńǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƸǇƣƷƤƒƷƴƩƚƒƁƄŽūŎŁŴƐǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǀƥǇŴǇǅǆǇƭǂƜƔƪǂƺƨŸŋăĭĸǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇƫƭǂǇǇǇǇƳǇƦƾǃƷƵƶǃƾƨǃǃǇƼƮĩİŀĳǇǇǇǇǇǇ",
"ǇǇǇǇǇǆƫǅǂƲưǇǇǇǇǇǇƘǂƩųǀǅǃƬƥǆǀǂƼŮćıęƮǇǇǇǇǇ",
"ǇǇǇǇưƭƾǆƪƾƻǅǇǇǇǇǇƸƧƨơƬưǅǅƯƺǂǇƟţĥŘĆļǇǇǇǇǇ",
"ǇǇǇƇƹơƣƴǇƢƯǇǇǇǇǄƳƵǄǅǅƿƈǄǄǅƷƿǀǅƌƆĄĥŘƛǇǇǇǇ",
"ǂǇǇǇǇǇǇǇǇǇǀƥǇǅƮƮƾǅǂǀǃǇǀƵǇǇƽǁƿǅƕħğċğƆǇǇǇǇ",
"žƊǇǇǇǇǇǇǇǇǇǇǇƤǁǀǃƶƻƶƿǇǄƭǂǂǄǂǅǁƑƫŲœńǇǇǇǇǇ",
"ǃƟŴǇǇǇǇǇǇƥƍƫƴǅƹƻƥƸƾǄƿƫƶǃǄǅǅǄǄǃƽŨĩĕŊǇǇǇǇǇ",
"ǇǂǅǇǇŠŤǇǇǇƴƦǅǁƵǆƦǁǄǄƬƽƦƩƿƿǃǄǃǃǇũĩŰþǇǇǇǇǇ",
"ǇǇǇǇŻƕŷǇǇǇǇƫƧƩǇƴǀǃǀưƽƴƿƮǅǇǆǆǇǆƗŲţĜŘǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƫǄƾǂǂƽƽƧƞƹǇǇǅƵƽƳģġĊƙǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇƫƷǂǁƪƩƄƴƳƐưǄǄƻǃǁƢŽŗĘłƨǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇƸƿǇƴƬǇǇƽǁǃƾǂƐƶǄƶǂǄǁŒţŗńƩǇǇǇǇǇ",
"ǇǇǇǇǇƭŪǇǇǇưƀƚǇǇǇƫƊƦǄǃƼƷƪƤƷǇǇƬƓŮĩŔĪƨǇǇǇǇǇ",
"ǇǇǇǇǇǇǇƪƧƤƄƣƭǇǇǂƷƷƚƜƦƽƑơơƩƸƘƨųŸŻƐŶǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇƆŹǇǇǇǇǇǇǇǇǇǇƶŻǇǇǇƅŭƙžųƅǂǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƮǇŨǆǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
gMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƿǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƦǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŹřǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇėƜǇǇǇǇǇǇǇǇǅıƬĜǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇưǇĸĿŐůŲŸūƁĎĒĘğıĕġŐŶǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇƿƛǇĘŎĽƍƁŲźĺġĦũŋħĹĩāĕĜǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇĹŀƮǇǇǇǇƧǁĕŧŽŉňŹƏŪőŕśŸŒĳěĩĚĎǇǇǇǇǇǇ",
"ǇǇǇǇǇǃĠŶŷĽĽǅǇǇǇǇǇŚƁœħŠůƕŉŘŶŹƗŬłĎĕûƙǇǇǇǇǇ",
"ǇǇǇǇŒĭŮŶĥŘſƻǇǇǇǇǇŹģģěĨőűƓŨţŬƈŶĶġĶøċǇǇǇǇǇ",
"ǇǇǇċŶįĤŪǇğğǆǆǇǇƺĭŏƈƖŻŨīŕŴŻŶƄżƁşşēČĠƌǇǇǇǇ",
"ƼǇǇǇǆǇǇǇǇǇƣĘǇƽŃĪűƈžŢŭƁŬłųƄƒƨƨưŢěđúĔūǇǇǇǇ",
"ďĽǇǇǇǇǇǇǇǇǇǇǇđżŽşŅŀŗŨƍƯĪŤơƿƭǁƩžžşŇĕǇǇǇǇǇ",
"ƲĮğǇǇǇǇǇǇŞĀĘŧŧŝĻęŀŶƈŬĥłŪƯƥƓƻƾƳƊņĨċĕǇǇǇǇǇ",
"ǇƽǂǇǇĹĿǇǇǇƍěŖŒƍǃġţƇŤīƂęĢśūƹƺƷƷƘŠĤŃêǇǇǇǇǇ",
"ǇǇǇǇńĠĈǇǇǇǇŴũŰǇŖŞƇŻłŨőŢŎśƁƕưƳƠůřŎĠħǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇĨƇŰœŦŽŌĳħŅſŷŮŵźŭĎĜûƗǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇĵļźŕĘĜĒƠƞĜŔŠŮţųƙūŗŁĄďƜǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇƟưǇũļǇǇƨƣƤơŋľŁśĭżƆšğŚİēƛǇǇǇǇǇ",
"ǇǇǇǇǇƦĸǇǇǇĳěƂǇǇǇıĤěŶźŭŃğĔĲŸŷĨġğĝĠāƞǇǇǇǇǇ",
"ǇǇǇǇǇǇǇĴĨĦēũƥǇǇƮůƆĬŦńńĻŷƞėľĩĠĨęŲŻŨǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇġĘǇǇǇǇǇǇǇǇǇǇƢĝǇǇǇĥıľįĸĵƾǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇơǇŀǅǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
bMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƾǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƣǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŜńǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇßƎǇǇǇǇǆǇǇǇǄąƦîǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƯǇĉãıūŘŘŎťÈÙÍöČñóĜŨǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇƼƒǇùâìþóĊĂāäÞçéêėāîÿ÷ǇǇǇǇǇǇ",
"ǇǇǇǇǇǆǇďĚƧǇǇǇǇƦƿØøÿßÞ÷ąøñÞéēá÷ýĆéĄǇǇǇǇǇǇ",
"ǇǇǇǇǇǃÛëßÛüǄǇǇǇǆǇĪĤĪĂá÷ćĀöėĊĲĕčĆíÛƍǆǇǇǇǇ",
"ǇǇǆǇĨìÜöÎßĀƸǇǇǇǇǇŠïïßÕñĈıćěĮłĝĸĄąèâǇǇǇǇǇ",
"ǇǇǇÒŜÍÍŒǇíÍǆǆǇǇƸÜßăČïéýÙČĜŏŗŕŁŎĶüïèŷǇǇǇǇ",
"ƹǇǆǇǆǇǇǆǇǇƖÛǇƹĐÜÜýùèéĞÿÜĒĮűƇƎųŕďĐþøĻǇǇǇǇ",
"ÓĞǇǆǇǇǇǇǇǇǇǇǇÐïääëãÚÝġĴåòŬƳƕƺƏŠłīčèǇǇǇǇǇ",
"ƫÑùǇǇǇǇǇǇĽÈÈĻíÖÞÞâÝüâáñĂƒŷłƶƲƜśĹĦöØǇǇǇǇǇ",
"ǇƻǁǇǇğĤǇǇǇŻÝçæżǂíàûÛèĊßäăęƝƥƔƐŐġĦøÙǇǇǇǇǇ",
"ǇǇǇǇĨÞØǇǇǇǇřŐřǇĩÞùíäõùîßêġłƇƉŽľĝģąàǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇÎûÛÚáóãêãìģĲĿŃīĦĐûóƗǆǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇĂéâÔÐÑÒƝƗèçýĆûğĹėđĸëĄƊǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǆǇƑƨǇŋĕǇǇƛƛƋƖÎôÛðÕċėđāöÿàƋǇǇǇǇǇ",
"ǇǇǇǇǇƢĲǇǇǇîïſǇǇǇüñÞôôÜãßÕÖėăëêìċêìƉǇǇǇǇǇ",
"ǇǇǇǇǇǇǇþÔãÞŋƢǇǇƥőŧÚňØêěťƋÖÝãäãâŅŎřǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇïðǇǇǇǇǇǇǇǆǇǇƛöǇǇǇàþëíþÛƸǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇƒǇãǄǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];

background(0,0,0,0);
noStroke();
for(var i  = 0 ; i < 40 ; i++){
    for(var j = 0 ; j < 40 ; j++){
        if(rMat[i].charCodeAt(j) + gMat[i].charCodeAt(j) + bMat[i].charCodeAt(j) < 1355 ){
            fill(rMat[i].charCodeAt(j) - 200,gMat[i].charCodeAt(j) - 200, bMat[i].charCodeAt(j) - 200);
            rect(10*i,10*j,10,10);
        }
    }
}


fireImages.push(get(0,0,400,400)); //fireImages Image 1


rMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǂǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇưǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇƴƩǇƺǇǇǇǇǇǇǇǇǇƓŸǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇƸƣƳƪƧƩƫƺǇǇǇǇǇƆŭǇǅŪưńǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇƛƣƽǃƺơǄƴǃƩƷƷƮƏƒƧƒžżũŎŁŴƐǇǇǇǇǇǇ",
"ǃǅǆǇǅǅƋǇǇǇǇƓƳǄƵƘƪǄǄǂǃƬƫƨƋƻǅƦƼƂŌăĭĸǇǇǇǇǇǇ",
"ƩƤƴǄƿƒǄǇǇǇǇǇƾƬǇƼǃƪƪơƫƶǄƲƤǇǅǁǆƩĦİŀĳǇǇǇǇǇǇ",
"ǇƝƲƴƍƥǇǇǇƷƱƺƽǇƫƭƬǇǇǇƟǁǅǃƸƯƺǆǀǇƚćıęƮǇǇǇǇǇ",
"ǇǇǅǃǄǇǇǇǆƸƹƻǃƨǇǇǇƸƧƤǇƫƯǅǅƯƺǇƷǇşĥŘĆļǇǇǇǇǇ",
"ǇǇƹƴƤƘơǇƸƧƸǅǁƿƴƧƢƴǃǇƭƗƻǄǅǅƷƿǃƷƎƆĄĥŘƛǇǇǇǇ",
"ǇǆƓǀƺǅƭƎƉƻǇƩƶƿǅƫǂǄǂǂǆǃǁǀǆǇƽǁƿǅƕħğċğƆǇǇǇǇ",
"ǇƷƻƾǂƯǅƺǆƷƸǄǃǅǄǄǄǃƸƷƪƺƽƺǅǂǅǂǅǁƑƫŲœńǇǇǇǇǇ",
"ǇǇǇǇǇǂƵƼƳƾƵƬƬƬƶƻǀǃǃƪǃǄǃǃǄǄǃǄǄǃƽŨĩĕŊǇǇǇǇǇ",
"ǇǇǇǇǇǇǅǅǅƮƤǅǇǇǅƽƦƴǄƲƼƧƧƦƽǆǃǄǃǃǇũĩŰþǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇƴƵǄǇƩƢǄǁǀǃǇǄƷǄǆǆǇǆƗŲţĜŘǇǇǇǇǇ",
"ǇǇǇǇǇǇǇƢƣƈƅƣǄƿƫƸƽǂƼǂƫǄǁǀƽǄǇǆƷǄƳģġĊƙǇǇǇǇǇ",
"ǇǇƲƍƅǇǇǀƂǂǆƮƨǆǇƕƪƪƿƪƿǅƴƩƵƱƹǆǀƢŽŗĘłƨǇǇǇǇǇ",
"ǇǇƱƜƹƑǆǇǇƅƶƾǇǇǇǇǇǇǇưǃǀǇŽƤǇǅǁǆƿŒţŗńƩǇǇǇǇǇ",
"ǇǇǇǇƚƆǂǇǇǇǅǅǇǇǇǇǇǇƨǀǄƧƪƤƿƷǅƦƼƒŮĩŔĪƨǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇƨƢƤƴưǇƵƶƵƴǇǇǇƜƧƒžƨųŸŻƐŶǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇƲƥǆƾǁǄƨƢǇǇǇǇǇǇǇƆŭƲžųƅǂǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǄƗƵǄƹƪƸưǇƫǇǇǇǇǇǇǇǇǇǇƮǇŨǆǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇƨƢƴƆǇǇǂƫǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǃǃǅǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
gMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƿǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƦǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇŤĭǇƒǇǇǇǇǇǇǇǇǇŹřǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǆǇǇŹģƩęĠųįƠǇǇǇǇǇĤīǇǅıƬĜǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǆǇǇŀĎŒŸťŖūĹŞňŌĿŋźĲĪģĎĞĳĕġŐŶǇǇǇǇǇǇ",
"ƻƼǂǇƻǁĦǇǇǇǇīįƇūįŋƙƈŴŧůŔęĮĸűęĻĴĨāĕĜǇǇǇǇǇǇ",
"ŭĒŃŭŏċǀǇǇǇǇǇƦĚƏŬƂĥĥħŎŹƒŒēŤšƙşĬĝĩĚĎǇǇǇǇǇǇ",
"ǇŋĿŦđųǇǇǇƦƗƚƗǇļŁĻǇǇǇĻŠůƕřĵŢşƖƄĮĎĕûƙǇǇǇǇǇ",
"ǇǇǂƻǂǇǇǇǃĽŮũūĭǇǇǇźĢėǇħőűƓũšŰŴƂĵġĶøċǇǇǇǇǇ",
"ǇǇƠũĤęŨǇŮħļƁŸŧŚůđįƀŨěĤŐŞűźŶƂƚźšşēČĠƌǇǇǇǇ",
"ǇǃąŎŨŻĢĒğƙǇħŕŴŧĩťƪƚƁŦŊŮŰƓƏƎƨƨưŢěđúĔūǇǇǇǇ",
"ǇƖƚƜưħžĸžŢŒŕşťƃƁơƇĶĴĪĶŋƆƤƍƕƯǁƩžžşŇĕǇǇǇǇǇ",
"ǇǇǇǇǆƮŒŬŝŨłńŃŃĻŒŠŔƅĦŒƙƘơƬƼƲƺƾƳƊņĨċĕǇǇǇǇǇ",
"ǇǇǇǇǇǇƼƻƼłđƽǇǇƿƒęŋƅńūěęĜŁƙƺƺƷƷƘŠĤŃêǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇŤūƹǇƃĕŮŮŒŏƖƂŒŬƕưƳƠůřŎĠħǇǇǇǇǇ",
"ǇǇǇǇǇǇǇďĕĜěĘƆŰĞơūſũŐĢƆżōŮƆŷŮŲźŭĎĜûƗǇǇǇǇǇ",
"ǇǆƄňĺǇǇƽĊŢƃĳĖƬǇğĚēƞķŔƉņěōĹšŠƋŧŗŁĄďƜǇǇǇǇǇ",
"ǇǇƅĺĶĻǅǆǇľĪƖǇǆǆǇǇǇǇŀūŮƒĢđŤšƙşřğŚİēƛǇǇǇǇǇ",
"ǇǇǇǇĻČƻǇǇǇƻƻǇǇǇǇǇǇĢŮŖĕŵēƢĭűęļğğĝĠāƞǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇŹŋŋňŃǇūűŬūǇǇǇŃĪģēğĩęŲŻŨǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇƐěŴŬŰƄğċǇǇǇǇǇǇǇĤīƈįĸĵƾǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇƾĻŤžŚężģƎŘǇǇǇǇǇǇǇǇǇǇơǇŀǅǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇŬĔĺĞǇǇƯĹǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇƻƻǂǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
bMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƾǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƣǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇŁøǇƀǇǇǇǇǇǇǆǇǇŜńǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǆǇǇşîƧÎäřùƔǇǇǇǇǇßõǇǄąƦîǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǆǇǇĖÏãăĶòäØÞäØÌĔůċãèÓ÷đñóĜŨǇǇǇǇǇǇ",
"ƷƸǀǇƸƿñǇǇǇǇùßýùÑäĒþóäĊ÷ÝĂÜéßõęāîÿ÷ǇǇǇǇǇǇ",
"ŐÖüĜáÏƾǇǇǇǇǇƖÉąÛæÔÖÒï÷ĆñÚñÜĲçëāĆéĄǇǇǇǇǇǇ",
"ǇĤúíÓŗǇǇǇƠƑƍƇǇēěēǇǇǇþß÷ćìêÿðĪĉñĆíÛƍǆǇǇǇǇ",
"ǇǇǀƸǂǇǇǆǂâÜÙñýǇǇǇşìÞǇëñĈĲćėŀĻĠĶĄąèâǇǇǇǇǇ",
"ǇǆƔŊÍÎŋǇŏöÒøéøİŕØ×ĖëÈðäíĈĚŏŕŬŉŎĶüïèŷǇǇǇǇ",
"ǇǁÈæ÷ößßÔƇǇîùßïÖãĖčøúÍăûŇńŪƇƎųŕďĐþøĻǇǇǇǇ",
"ǇƇƋƐƬÈøà÷ã×æâóúöďúáÒìÈ×ŪƂŘŃƜƺƏŠłīčèǇǇǇǇǇ",
"ǇǇǇǇǆƫ×ðõÛ÷ěĚěëæÚëôãÙŨŬŮŴƷƦưƲƜśĹĦöØǇǇǇǇǇ",
"ǇǇǇǇǇǇƹƸƹĐÒƺǇǇƼžÔßûáõÝÚÞÓļƝƥƔƐŐġĦøÙǇǇǇǇǇ",
"ǇǇǇǇǇǇǆǇǇǇǇǇŊœƵǇŵÕòäæåĜāðďłƇƊŽľĝģąàǇǇǇǇǇ",
"ǇǇǇǇǇǇǇÏÖßâÙïÜÔƙÚïÛæßüêæÚċĲĽĸěĦĐûóƗǆǇǇǇǇ",
"ǇǆŮīěǇǇƻÕÜõØÈƔǇéÐÈƔċéÿÓàçðÿñĜďđĸëĄƊǇǇǇǇǇ",
"ǇǇŰċðĈǄǆǇĪÏƆǇǆǆǇǇǇǇċëßŮâÕñÜĲçĎāöÿàƋǇǇǇǇǇ",
"ǇǇǇǇčÐƹǇǇǇƷƷǇǇǇǇǇǇäßçÎśÔƕÏéßöéìċêìƉǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇŠėæàëǇŋœœŎǇǇǇěäèÜäãâŅŎřǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇſÞôÜôõÖÈǇǇǇǇǇǇǇßôŬíþÛƸǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇƻĕÛùáÏŧÉ÷ĩǇǇǇǇǇǇǆǇǇǇƒǇãǄǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇŏÓÚóǇǇƨĐǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇƷƸǁǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
background(0,0,0,0);
noStroke();
for(var i  = 0 ; i < 40 ; i++){
    for(var j = 0 ; j < 40 ; j++){
        if(rMat[i].charCodeAt(j) + gMat[i].charCodeAt(j) + bMat[i].charCodeAt(j) < 1355 ){
            fill(rMat[i].charCodeAt(j) - 200,gMat[i].charCodeAt(j) - 200, bMat[i].charCodeAt(j) - 200);
            rect(10*i,10*j,10,10);
        }
    }
}


fireImages.push(get(0,0,400,400)); //fireImages Image 2

rMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǂǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇưǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƓŸǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǅǅŪưńǇǇǇǇǇǇǇǇ",
"ǇƩơƶǇǇǇƴƵƵƺǇǇǇǇǇǇǇǇǇǇǇǇƎƅƄƲƉšŪŎŁŴƐǇǇǇǇǇǇ",
"ƷǅǇǁƾǇǇƵǄƿƻǃǇǇǇǇǇǇǂǅǅǅǇƨƾǅǅƶǇƅŋăĭĸǇǇǇǇǇǇ",
"ǇǇƭƮǂǇƮƾǂǄǅƻƺǇǇǇǇƼƮƺƻƽƼƨƬǇǆǀǆǆħİŀĳǇǇǇǇǇǇ",
"ƹǄƪƜƲƩǀǀǄƴƥǅƵǇǇǇƴƪǆǄǃǄǄǃưƫƺǃƿƯŰćıęƮǇǇǇǇǇ",
"ǇǇǇƽƙǅƾǄƧǇƻƦƷǇǇƶƟǂƦƧƛƝƴǅǃưƸƴǅǇşĥŘĆļǇǇǇǇǇ",
"ǇǇǇǇƬƓƲƲǇǇǇǇƵǇƳƁƵƴǇǃǇƲƤƲǀǇƷǀǁǇƌƆĄĥŘƛǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǃǆƠǇƫƌƺǇǇǆƥƿƾƾǂǅƯƦƽǁƿǅƕħğċğƆǇǇǇǇ",
"ǇƎƯƪƻǀƫƳƟƠƾǇǇǇǇƻƖƼƾǁƫǅǁǀƿǂǆǂǅǁƑƫŲœńǇǇǇǇǇ",
"ƥƭǆǂƆǇǇƭƮǂǇǇǇǇǇǇǇǇƾưƺƭƾǅǃǂǃǄǄǃƽŨĩĕŊǇǇǇǇǇ",
"ŷƤƥǂǅƌǇǇǇǇƋƏƂǇǇǇǇƷǁǃǄǅǂǀƼǆǃǄǃǃǇũĩŰþǇǇǇǇǇ",
"ǇǇǇǆƯƼƴǇǇƘƹǇƹƑƝƣƶơǄƾǀǀǃǆƸǄǆǆǇǆƗŲţĜŘǇǇǇǇǇ",
"ǇǃǃǃǇƥƨƺƌƢƱƨǀǀǅǅǃǄƾǀǁƾǁƾǆǆǇǆƷǄƳģġĊƙǇǇǇǇǇ",
"ƿƚƨƸǇǇǇǇǇǇǇǇƲǃǅƿǀƮƆƯżƔƬƭƼƪǂǇǀƢŽŗĘłƨǇǇǇǇǇ",
"ƎƻƺǇǇǇǇǇǇǇǇǇǇƬƬƯƯƽǇǇǇǇƿƿƪǇǆǀǆǁŒţŗńƩǇǇǇǇǇ",
"ǄǅǇǇǇǇǇǇǇǇǇǇǇǇǇƆƐƧǇƯƠƊǇƣƾǅǅƶǅƨūĩŔĪƨǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǀƶǇǇǇǇǇƪǇƭƣƶǇƢƥǇǇƒƈƋŽƧűŸŻƐŶǇǇǇǇǇǇ",
"ǇǇƩƒǆǇƦƤǇǇǇǇǇǇǇǇǇǇƌƐƑǇǇǇǇƸŬƲžųƅǂǇǇǇǇǇǇǇǇ",
"ǇǇǄƯƻƫƸƴǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƮǇŨǆǇǇǇǇǇǇǇǇ",
"ǇǇǇƮǂǅƼƲǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇƮƥǃǆǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
gMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƿǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƦǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŹřǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǅǅıƬĜǇǇǇǇǇǇǇǇ",
"ǇŭĈŷǇǇǇŦŭūƇǇǇǇǇǇǇǇǇǇǇǇǇŸıĚŨňĨĳĕġŐŶǇǇǇǇǇǇ",
"ƔǂǇŒƚǇǇŭŚŻŐưǇǇǇǇǇǇƻƼƻƼǇĔŅŒŔķŎĴĨāĕĜǇǇǇǇǇǇ",
"ǇǇĸŊưǇŊŵƚƃŹōƇǇǇǇǆƌŋňŧŭőğİŢƒƤƁŜėĩĚĎǇǇǇǇǇǇ",
"ƝƼƑėĪģƀżŵŊĢƖũǇǇǇƣĪƐƎƈŮƃŬłĪĶűƞŵłĎĕûƙǇǇǇǇǇ",
"ǇǇǇƱĒŰŻŢğǇƏĖŵǇǆƣėſėęĢħŰƊƁūŝŀŖƙĴġĶøċǇǇǇǇǇ",
"ǇǇǇǇƑċĩņǇǆǇǇťǇƆėŲŤǇƈƔļĢľŷƀŶƉƃƦŞşēČĠƌǇǇǇǇ",
"ǇǇǇǇǇǇǇǇƻǇĄǃŰĐƟǇǇǅĐŦŲŵťŐĨĵƏƨƩƱŢěđúĔūǇǇǇǇ",
"ǇŐĿŃưƢĴƗĕČƱǇǇǇǇơıƚƛƫĘŚƉƜŧŨƓƯǁƩžžşŇĕǇǇǇǇǇ",
"ŵĤƑŚăǇǇĸņƯǇǇǇǇǇǇǇǇƘńŖĵŏŽƨƱƳƺƾƳƊņĨċĕǇǇǇǇǇ",
"ĒėėœśŌǇǇǇǇĒĝėǇǇǇǇŸŎŸƇƈƑňĿƙƺƺƷƷƘŠĤŃêǇǇǇǇǇ",
"ǇǇǇǇŃŜũǇǇğĸŲŔĒŰŭŲĔűŹşŝŷƋŃŮƕưƳƠůřŎĠħǇǇǇǇǇ",
"ǇƼƻƻǇĖĦžĒĥŕĬŢŵŔŗŕůŬŊŏűşűƇżŷŭŲźŭĎĜûƗǇǇǇǇǇ",
"ưĐĝƜǇǇǇǇǇǇǇǇŖƃƋƇŻĸęžċĕĜĠőĩŉŻƉŧŗŁĄďƜǇǇǇǇǇ",
"ąĿƌǆǇǇǇǇǇǇǇǇǇĻĿņŇƒǇǇǇǇƻƝĪŢƒƚƁŜğŚİēƛǇǇǇǇǇ",
"ƼƻǇǇǇǇǇǇǇǇǇǇǇǇǇĔğěǇōĦĤǇČŃőœĴŎĘğĝĠāƞǇǇǇǇǇ",
"ǇǇǇǇǇǇǇƢŬǇǇǇǇǇŹǇŸėĳźĥũǇǇŉĦĺĐĞĩęŲŻŨǇǇǇǇǇǇ",
"ǇǇũĜǀǇĞĎǇǇǇǇǇǇǇǇǇǇĖĜŒǇǇǇǇƧĪƈįĸĵƾǇǇǇǇǇǇǇǇ",
"ǇǇƸĪņľŊőǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇơǇŀǅǇǇǇǇǇǇǇǇ",
"ǇǇǇłűƄŪľǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇŁĔƱǂǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
bMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƾǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƣǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŜńǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǄǄąƦîǇǇǇǇǇǇǇǇ",
"ǇőÈšǇǇǇńœœŵǇǇǇǇǇǇǇǇǇǇǇǇūĄ×ŋħĜĐñóĜŨǇǇǇǇǇǇ",
"ƄǀǇëƌǇǇŐåàÛƩǇǇǇǇǇǇƹƸƸƸǅÔÔÑÛÙÎęāîÿ÷ǇǇǇǇǇǇ",
"ǇǇąġƩǇĪêąøï×ŵǇǇǇǆžÜ×íî×Øå×ĳŔĜĉûĆéĄǇǇǇǇǇǇ",
"ƏƹƇÚÖÌé÷ôĊÎĉŐǇǇǇƜÏāĆćèùëäåÍąĸĜĎĆíÛƍǆǇǇǇǇ",
"ǇǇǇƫÚóãçäǇżÔřǇǆƛàÞ××ÜæïÿāĊĕĎÖıĶĄąèâǇǇǇǇǇ",
"ǇǇǇǇƆÎÔċǇǅǇǇŃǇűçŔŊǇŗŜáÞâēĠŏŒšśŎĶüïèŷǇǇǇǇ",
"ǇǇǇǇǇǇǇǇƷǇÈǂŔÖƓǇǇǄËÙÜàÞÎÙæūƇƐŹŕďĐþøĻǇǇǇǇ",
"ǇĵĘěƬƕāƉÔÈƪǇǇǇǇƕāƋƋƦËÚĆťÈÓļƜƺƏŠłīčèǇǇǇǇǇ",
"šÝüãËǇǇĆĚƨǇǇǇǇǇǇǇǇƉüíîÑĕƄƨƧưƲƜśĹĦöØǇǇǇǇǇ",
"è××ÜâķǇǇǇǇÙêèǇǇǇǇŠäõûÿčßÑļƝƥƔƐŐġĦøÙǇǇǇǇǇ",
"ǇǇǇǇìÞņǇǇêàñêÞšŚŘÎóßàßĈĔìĎłƇƊŽľĝģąàǇǇǇǇǇ",
"ǇƹƸƸǇÝîŤØíįýßàåçæóÜåçÞâÞĘĠĲļĸěĦĐûóƗǆǇǇǇǇ",
"ƩÙÈƏǇǇǇǇǇǇǇǇĦèõāÝ×ßŬÌÍÐÑ÷éÙČĘďđĸëĄƊǇǇǇǇǇ",
"ÈÛžǆǇǇǇǇǇǇǇǇǇēĘĠĢƁǇǇǇǇƷƍÞ×ĳŌĝċāöÿàƋǇǇǇǇǇ",
"ƸƷǇǇǇǇǇǇǇǇǇǇǇǇǇÚêàǇħðïǇËÒÑÛ×ÑßíċêìƉǇǇǇǇǇ",
"ǇǇǇǇǇǇǇƕŌǇǇǇǇǇŠǇşÉÖò×ŋǇǇĝÞèÝæäâŅŎřǇǇǇǇǇǇ",
"ǇǇŌáƾǇäËǇǇǇǇǇǇǇǇǇǇàèķǇǇǇǇƚóŬíþÛƸǇǇǇǇǇǇǇǇ",
"ǇǇƴÛÝąÞéǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƒǇãǄǇǇǇǇǇǇǇǇ",
"ǇǇǇĐîòïíǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇĐÎƪǀǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
background(0,0,0,0);
noStroke();
for(var i  = 0 ; i < 40 ; i++){
    for(var j = 0 ; j < 40 ; j++){
        if(rMat[i].charCodeAt(j) + gMat[i].charCodeAt(j) + bMat[i].charCodeAt(j) < 1355 ){
            fill(rMat[i].charCodeAt(j) - 200,gMat[i].charCodeAt(j) - 200, bMat[i].charCodeAt(j) - 200);
            rect(10*i,10*j,10,10);
        }
    }
}


fireImages.push(get(0,0,400,400)); //fireImages Image 3


rMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǂǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇưǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƓŻǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇūŭưńǇǇǇǇǇǇǇǇ",
"ǇǇƞƤǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƣƗƜƒƢŶƊƀŸƄŮōŁŴƐǇǇǇǇǇǇ",
"ǇƦǇżųǇǇǇǇǇǇǇǇǇǇǇǇƤƣƻǅƾǅƪǇƦǂƺƨƄŊăĭĸǇǇǇǇǇǇ",
"ƎǀƹǄƬŸǃǇǇǇǇǇƲƘƘƥǇǄƶƢƜǆǃƿƬƶǄǇƼƮĩİŀĳǇǇǇǇǇǇ",
"ǇǇǇǇǇƕǄǇǇǇǇƺƪƴǇƷƻƳǇǄƫƇƿǃƸǇƲǁǂƼŮćıęƮǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇƹƉƥǀƝǅƽƾƤƛǂưǀǃƾǄǅǀǇƟţĥŘĆļǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇƱƓǅǃǅǆǀǅƳƳǃǇǇǇƽǆƌƆĄĥŘƛǇǇǇǇ",
"ǂǇǇǇǇƵƎƊǇǇǇǇǇǇǇǇƎƘƧƻƶƬǇǇǇǂǅǄǄǆƕħğċğƆǇǇǇǇ",
"žƊǇǇƴƜƫǅǇǇǇǇǇǇǇǇǇǇǇǄưǅǁǂǅǄǅǅǃǆƑƫŲœńǇǇǇǇǇ",
"ǃƟŴǇǇǇǇǇǇǇǇǇǇǇǇǇǇƠƬƩǆǂǃǅǆǄǂǃǅǄƽŨĩĕŊǇǇǇǇǇ",
"ǇǂǅǇǇǇǇǇǇǇǇǇǇǇǇǇƪƹǂǂǄǄǄƾƿǀǅǄǄƲǇũĩŰþǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƟưƼƳƲǃǄǂƫưǀƺǁƽǇƗŲţĜŘǇǇǇǇǇ",
"ǇǇǆǇǃǃǇǇǇǇƢǅǅǄƌƗƧƸǇƝƬƾƬǀǂǃƶƿǄƽƳģġĊƙǇǇǇǇǇ",
"ǇǇƞƮưưƭƾƘƵƭǇƾǇǇǇǇǇǇǇƲƹƻǃǃǀǄǃǁƢŽŗĘłƨǇǇǇǇǇ",
"ǇǇǇǇƫƼǆƺƴǇƫǇǇǇǇǇǇǇǇƙƬƾǅǁƿǅǄǂǄǁŒţŗńƩǇǇǇǇǇ",
"ǇǇǇǇǇƼǁƿǂƣǇǇǇǃƶǇǇǇƦƶǃƿƿǄǄǆǇƹƬƓŮĩŔĪƨǇǇǇǇǇ",
"ǇǇǇǇǇǇƶƵƶǇǇǇǇǇǇƛƣƣƷǅƫƹƞƸǆƨƂžƪŬŹŻƐŶǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƓƳƾƗƞŻƏǇǇƷŬƲžųƅǂǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƶƶƲǇƵƾǇǇǇǇǇƮǇŨǆǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
gMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƿǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƦǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŹŝǄǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇĶĶƬĜǇǇǇǇǇǇǇǇ",
"ǇǇũŷǇǆǇǇǇǇǇǇǇǇǇǇǇǇǇũœįĘŻŌĠĒĜħĭĕġŐŶǇǇǇǇǇǇ",
"ǇĞŃĚćǇǇǇǇǇǇǇǇǇǇǇǇďĖŦœŲűĥǇĚũŋħĭĪāĕĜǇǇǇǇǇǇ",
"ťơƜƜĤĥǁǇǇǇǇǆƊĻľťǇƴƜĴĥšųŦģİŞŸŒĳěĩĚĎǇǇǇǇǇǇ",
"ǇǇǇǇǇļƿǇǇǇǇơħŜŦŇƏƖǇưƌęŕƅŎůĳŽƗŬłĎĕûƙǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇƚċČƸĘŧŭŞġĖřļšŗųŬŢŠƈŶĶġĶøċǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇƓčūƅƈŰƉŨŘįŒžƏƉƊƄşşēČĠƌǇǇǇǇ",
"ƼǇǇǇǇƎĐćǇǇǇǇǇǇǆǇĲģġœśŖƕƉŷƢƌƺƾƳţěđúĔūǇǇǇǇ",
"ďĽǇǇţąĘƼǇǇǇǇǇǇǇǇǇǇǇƻıƅƑƑƓƴǁǁƶƺŽžşŇĕǇǇǇǇǇ",
"ƲĮğǇǇǇǇǆǇǇǇǇǇǇǇǇǇřĠģťšƒƜƞƛƬưǂƯƋņĨċĕǇǇǇǇǇ",
"ǇƽǂǇǇǇǇǇǇǇǇǇǇǇǇǇįŧƝƞƥƠƶŶŶƂƸƼƽƝƛŠĤŃêǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇŌŅŪŃļżƚŮļŠƑƀƗƚƝůřŎĠħǇǇǇǇǇ",
"ǇǇǁǇƼƻǇǇǇǇąƼǀƼĒĢģŸǇōģŔľŷƈŽŴŽűŻŭĎĜûƗǇǇǇǇǇ",
"ǇǇūĺĴŐĿƔķĮŇǇƪǇǇǇǇǇǇǇżĺŶƆŧŬŽŵƙūŗŁĄďƜǇǇǇǇǇ",
"ǇǇǇǇŁŇƐńĿƟĹǇǇǇǇǇǇǇǇĨĩŶŸœŤƃťźƆšğŚİēƛǇǇǇǇǇ",
"ǇǇǇǇǇƎőŹŤċǇǇǇƻƔǇǇǇĞŔƄŷŶơšŻƀŊĨĠğĝĠāƞǇǇǇǇǇ",
"ǇǇǇǇǇǇŴūųǇǆǇǇǇǇŀĎęřŬĹŵĨłűıĜğĠİĘŲŻŨǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇīĳŊĞŜğĔǇǇƨĪƇįĸĵƾǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƔƗƖǇƝƴǇǇǇǇǇơǇŀǅǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
bMat = [
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƾǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƣǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇŜŊǃǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇûċƦîǇǇǇǇǇǇǇǇ",
"ǇǇœŤǇǆǇǇǇǇǇǇǇǇǇǇǆǇǇŖĻå×ŪĚÚÙàĂøóóĜŨǇǇǇǇǇǇ",
"ǇäÚñÙǇǇǇǇǇǇǇǇǇǇǇǇÎ×âçßéìǇÍçéëæĆîÿ÷ǇǇǇǇǇǇ",
"ŝƎƎƆÞĄǁǇǇǇǇǆŹĘėŉǇƭƎăÏìóÜÔÛëēáùýĆéĄǇǇǇǇǇǇ",
"ǇǇǇǇǇčƼǇǇǇǇƖÎÕì×ſƊǇƩŽèßõÚýßĎĲĕčĆíÛƍǆǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇƌÐÈƳÙíÝáïãâòàåÚĉċĘłĝĸĄąèâǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǆǇǇǇǇǇƂËñíîòĄîáßìĠœŕœŁŎĶüïèŷǇǇǇǇ",
"ƹǇǇǇǇŻÑÊǇǇǇǇǇǇǆǇĄñíæíìĮĢĖŕĭƤƦƔŒďĐþøĻǇǇǇǇ",
"ÓĞǇǇŀÈÈƹǇǇǇǇǇǇǇǇǇǇǇƻÔďđıŉżƸƺƓƓŠłīčèǇǇǇǇǇ",
"ƫÑùǇǇǇǇǆǇǇǇǇǇǇǇǇǇıÍÑíàĈŋŕţƕƟǀƛśĹĦöØǇǇǇǇǇ",
"ǇƻǁǇǇǇǇǇǇǇǇǇǇǇǇǇýêĞĠĒčłãâĈƢƪưƈőġĦøÙǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇĩÜèÜ×éĊßîĤŞŠŷżŨĿĝģąàǇǇǇǇǇ",
"ǇǇƾǇƸƷǇǇǇǇÈƹƾƹÙìîşǇĦÞÝíãļĦŀŁŀĬĦĐûóƗǆǇǇǇǇ",
"ǇǇŒĈÝÔĕƆČ×ĝǇơǇǇǇǇǇǇǇťäéõùçĻĢĹėđĸëĄƊǇǇǇǇǇ",
"ǇǇǇǇęØþÙÜĆĒǇǇǇǇǇǇǇǇúÔãĎà×ġóĊėđāöÿàƋǇǇǇǇǇ",
"ǇǇǇǇǇżæÝäÈǇǇǇƷƄǇǇǇäÛößÝďòēĚçëèíċêìƉǇǇǇǇǇ",
"ǇǇǇǇǇǇśœśǇǆǇǇǇǇĖÏÏñçØŝÝÌø×ãääĀàŅŎřǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇùàãÛĸøáǇǇƛóūíþÛƸǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇƆƊƊǇƓưǇǇǇǇǇƒǇãǄǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǆǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
"ǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇǇ",
];
background(0,0,0,0);
noStroke();
for(var i  = 0 ; i < 40 ; i++){
    for(var j = 0 ; j < 40 ; j++){
        if(rMat[i].charCodeAt(j) + gMat[i].charCodeAt(j) + bMat[i].charCodeAt(j) < 1355 ){
            fill(rMat[i].charCodeAt(j) - 200,gMat[i].charCodeAt(j) - 200, bMat[i].charCodeAt(j) - 200);
            rect(10*i,10*j,10,10);
        }
    }
}


fireImages.push(get(0,0,400,400)); //fireImages Image 4

    background(0,0,0,0);
    pushMatrix();
    translate(200,200);
    scale(2,1);
    strokeWeight(1);
    stroke(0,0,0);

    strokeWeight(3);
    line(2,-170,7,-183);
    line(-2,-170,-7,-183);
    noStroke();
    
    noStroke();
    fill(214, 7, 7);
    ellipse(0,-140,36,60);
    rect(-10,-140,20,40);
    fill(0,0,0);
    ellipse(8,-154,7,5);
    ellipse(-8,-154,7,5);
    fill(214, 7, 7);
    

    beginShape();
        curveVertex(-31,4); 
        curveVertex(8,-60); 
        curveVertex(-10,-105); 
        curveVertex(7,-104); 
        curveVertex(23,-55); 
        curveVertex(-12,3); 
        curveVertex(32,53); 
        curveVertex(-3,120); 
        curveVertex(34,162); 
        curveVertex(19,155); 
        curveVertex(-20,121); 
        curveVertex(12,55); 
        curveVertex(-31,4); 
        curveVertex(8,-60); 
        curveVertex(-10,-105); 
    endShape();
    popMatrix();
    
    snakeImages.push(get(80,0,240,400)); // snakeImages 0
    
    background(0,0,0,0);
    pushMatrix();
    translate(200,200);
    scale(2,1);
    strokeWeight(1);
    stroke(0,0,0);

    strokeWeight(3);
    line(2,-170,7,-183);
    line(-2,-170,-7,-183);
    noStroke();
    
    noStroke();
    fill(214, 7, 7);
    ellipse(0,-140,36,60);
    rect(-10,-140,20,40);
    fill(0,0,0);
    ellipse(8,-154,7,5);
    ellipse(-8,-154,7,5);
    fill(214, 7, 7);
    beginShape();
        curveVertex(31,4); 
        curveVertex(-8,-60); 
        curveVertex(10,-105); 
        curveVertex(-7,-104); 
        curveVertex(-23,-55); 
        curveVertex(12,3); 
        curveVertex(-32,53); 
        curveVertex(3,120); 
        curveVertex(-34,162); 
        curveVertex(-19,155); 
        curveVertex(20,121); 
        curveVertex(-12,55); 
        curveVertex(31,4); 
        curveVertex(-8,-60); 
        curveVertex(10,-105);
    endShape();
    popMatrix();
    
    snakeImages.push(get(80,0,240,400));    //snakeImages 1
    
    
    background(0,0,0,0);
    pushMatrix();
    translate(200,200);
    scale(2,1);
    strokeWeight(1);
    stroke(0,0,0);

    strokeWeight(3);
    line(2,-170,7,-183);
    line(-2,-170,-7,-183);
    noStroke();
    
    noStroke();
    fill(195, 219, 11);
    ellipse(0,-140,36,60);
    rect(-10,-140,20,40);
    fill(0,0,0);
    ellipse(8,-154,7,5);
    ellipse(-8,-154,7,5);
    fill(195, 219, 11);
    

    beginShape();
        curveVertex(-31,4); 
        curveVertex(8,-60); 
        curveVertex(-10,-105); 
        curveVertex(7,-104); 
        curveVertex(23,-55); 
        curveVertex(-12,3); 
        curveVertex(32,53); 
        curveVertex(-3,120); 
        curveVertex(34,162); 
        curveVertex(19,155); 
        curveVertex(-20,121); 
        curveVertex(12,55); 
        curveVertex(-31,4); 
        curveVertex(8,-60); 
        curveVertex(-10,-105); 
    endShape();
    popMatrix();
    
    snakeImages.push(get(80,0,240,400)); // snakeImages 2
    
    background(0,0,0,0);
    pushMatrix();
    translate(200,200);
    scale(2,1);
    strokeWeight(1);
    stroke(0,0,0);

    strokeWeight(3);
    line(2,-170,7,-183);
    line(-2,-170,-7,-183);
    noStroke();
    
    noStroke();
    fill(195, 219, 11);
    ellipse(0,-140,36,60);
    rect(-10,-140,20,40);
    fill(0,0,0);
    ellipse(8,-154,7,5);
    ellipse(-8,-154,7,5);
    fill(195, 219, 11);
    beginShape();
        curveVertex(31,4); 
        curveVertex(-8,-60); 
        curveVertex(10,-105); 
        curveVertex(-7,-104); 
        curveVertex(-23,-55); 
        curveVertex(12,3); 
        curveVertex(-32,53); 
        curveVertex(3,120); 
        curveVertex(-34,162); 
        curveVertex(-19,155); 
        curveVertex(20,121); 
        curveVertex(-12,55); 
        curveVertex(31,4); 
        curveVertex(-8,-60); 
        curveVertex(10,-105);
    endShape();
    popMatrix();
    
    snakeImages.push(get(80,0,240,400));    //snakeImages 3

    background(0,0,0,0);
    pushMatrix();
    translate(200,200);
    scale(2,1);
    strokeWeight(1);
    stroke(0,0,0);

    strokeWeight(3);
    line(2,-170,7,-183);
    line(-2,-170,-7,-183);
    noStroke();
    
    noStroke();
    fill(19, 82, 209);
    ellipse(0,-140,36,60);
    rect(-10,-140,20,40);
    fill(0,0,0);
    ellipse(8,-154,7,5);
    ellipse(-8,-154,7,5);
     fill(19, 82, 209);
    

    beginShape();
        curveVertex(-31,4); 
        curveVertex(8,-60); 
        curveVertex(-10,-105); 
        curveVertex(7,-104); 
        curveVertex(23,-55); 
        curveVertex(-12,3); 
        curveVertex(32,53); 
        curveVertex(-3,120); 
        curveVertex(34,162); 
        curveVertex(19,155); 
        curveVertex(-20,121); 
        curveVertex(12,55); 
        curveVertex(-31,4); 
        curveVertex(8,-60); 
        curveVertex(-10,-105); 
    endShape();
    popMatrix();
    
    snakeImages.push(get(80,0,240,400)); // snakeImages 4
    
    background(0,0,0,0);
    pushMatrix();
    translate(200,200);
    scale(2,1);
    strokeWeight(1);
    stroke(0,0,0);

    strokeWeight(3);
    line(2,-170,7,-183);
    line(-2,-170,-7,-183);
    noStroke();
    
    noStroke();
     fill(19, 82, 209);
    ellipse(0,-140,36,60);
    rect(-10,-140,20,40);
    fill(0,0,0);
    ellipse(8,-154,7,5);
    ellipse(-8,-154,7,5);
     fill(19, 82, 209);
    beginShape();
        curveVertex(31,4); 
        curveVertex(-8,-60); 
        curveVertex(10,-105); 
        curveVertex(-7,-104); 
        curveVertex(-23,-55); 
        curveVertex(12,3); 
        curveVertex(-32,53); 
        curveVertex(3,120); 
        curveVertex(-34,162); 
        curveVertex(-19,155); 
        curveVertex(20,121); 
        curveVertex(-12,55); 
        curveVertex(31,4); 
        curveVertex(-8,-60); 
        curveVertex(10,-105);
    endShape();
    popMatrix();
    
    snakeImages.push(get(80,0,240,400));    //snakeImages 5

    

};



var xAxisVector = new PVector(1,0);


/*making a general function to know if an object is drawable :- 
assuming any object won't be larger than 40 pixels*/
var isDrawable = function(me){
    if( ((me.position.x - 20) > translateDist && (me.position.x - 20) < translateDist + 400)                                  ||((me.position.x + 20) > translateDist && (me.position.x + 20) < translateDist + 400)){
        return true;
    }
    return false;
};


// drawing of maze
var tilemap = [
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "w fffff    f f wwww   wwwww  f f fwwwwww",
        "w fffff                        f   f  ww",
        "ww             f f f f f  ffff f f    ww",
        "ww   f f       wwwwwwwww       ww ff  ww",
        "ww             ff      w              ww",
        "ww f           fff     wwwwwwwww   fff w",
        "ww         wwwwwwwwwww     f  ww   fff w",
        "ww         wwwwwwwwwww      f ww   fff w",
        "ww  f      wwwwwwwwwww        ww   fff w",
        "ww     ff  wwwwwwwwwwwff              ww",
        "ww     f   wwwwwwwwwww ff          f  ww",
        "ww   f     wwwwwwwwwww       f ff     ww",
        "ww    f         f  fff  w    ww f     ww",
        "ww f f f   f   w        w    wwf      ww",
        "ww      f   f f    wwwwww    wwf       w",
        "www      f             f           ffffw",
        "www    wwwwf f f f f f     wwwww   ffffw",
        "www    wwww    wwwwwwww    wwwww   ffffw",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        ];
var wallObj = function(x, y) {
    this.position = new PVector(x,y);
};


var stoneObj = function(x,y){
    this.position = new PVector(x,y);
    this.id = -1;
};
var foodObj = function(x,y){
    this.position = new PVector(x,y);
    this.eaten = 0;
};

var fireOffState = function(){};
var bombSetState = function(){};
var bombTickState = function(){};
var fireState = function(){};


var fireObj = function(){
    this.position = new PVector(-50,-50);
    this.bombEnable = 0;
    this.bombSetOff = 0;
    this.currState = 0;
    this.bombTimer = 0;
    this.fireTimer = 0;
    this.state = [new fireOffState(), new bombSetState(), new bombTickState(), new fireState()]; 
};

fireObj.prototype.changeState = function(x){
    this.currState = x;
};
fireObj.prototype.draw = function() {
    switch(this.currState){
        case 0:
            break;
        case 1:
            
            noStroke();
            pushMatrix();
            translate(this.position.x,this.position.y);
            scale(1/10);
            fill(234, 134, 4);
            rect(-10,-120,20,30,5);
            fill(230, 242, 239);
            rect(-10,-100,20,100);
            fill(0, 0, 0);
            rect(-50,-10,100,100);
            ellipse(0,100,200,200);
            popMatrix();
            
            
            break;
        case 2:
            noStroke();
            pushMatrix();
            translate(this.position.x,this.position.y);
            scale(1/10);
            fill(234, 134, 4);
            rect(-10,-20-this.bombTimer,20,30,5);
            fill(230, 242, 239);
            rect(-10,-this.bombTimer,20,this.bombTimer);
            fill(0, 0, 0);
            rect(-50,-10,100,100);
            ellipse(0,100,200,200);
            popMatrix();
            break;
        case 3:
            image(fireImages[floor((this.fireTimer%50)/10)],this.position.x-20,this.position.y-20,40,40);
            break;
    }
};

var walls = [];
var grass = [];
var food = [];
var fire = new fireObj();

wallObj.prototype.draw = function() {
    image(images[0],this.position.x, this.position.y, 20, 20);
};


stoneObj.prototype.draw = function() {
    image(images[1],this.position.x, this.position.y, 20, 20);
};

foodObj.prototype.draw = function() {
    if(this.eaten === 0){
        image(images[2],this.position.x,this.position.y,10,10);
    }
};

foodObj.prototype.eat = function(){
    if(this.eaten === 0){
        score++;
        if(score === 100){
            start = 2;
            won = 1;
        }
    }
    this.eaten  = 1;
};

var initTilemap = function() {
    for (var i = 0; i< tilemap.length; i++) {
        for (var j =0; j < tilemap[i].length; j++) {
            switch (tilemap[i][j]) {
                case 'w': walls.push(new wallObj(j*20, i*20));
                    break;
                case ' ': grass.push(new stoneObj(j*20,i*20));
                    grass[grass.length - 1].id = grass.length - 1;
                    break;
                case 'f': food.push(new foodObj(j*20,i*20));
                          grass.push(new stoneObj(j*20,i*20));
                    break;
            }
        }
    }
};


//Project 4 State Objects :- 
var wanderState = function(){
    this.angle = 0;
    this.wanderDist = 0;
    this.step = new PVector(0,0);
    this.prevAngle1 = 0;
    this.prevAngle2 = 0;
    
    this.obsDebug = 0;
    this.changeStateDisable = 120;
};

var chaseState = function(){
    this.step = new PVector(0,0);
};

var deadState = function(){

};

wanderState.prototype.collideWall = function(me){
    
    for(var i = 0 ; i < walls.length ; i++){
        if(dist(me.position.x,me.position.y,walls[i].position.x,walls[i].position.y) < 30){
            return i;
        }
    }
    if(dist(me.position.x,me.position.y,fire.position.x,fire.position.y) < 30 && fire.currState === 3){
        return 900;
    }
    return -1;
    
};

wanderState.prototype.execute = function(me,target){
    if(this.wanderDist <= 0 ){//&& this.checkObs(me) !== 1){
        this.wanderDist = random(100,200);
        this.angle = toPI*random(-45,45);
       // this.step.set(cos(this.angle),sin(this.angle));
        
    }
    this.step.set(cos(this.angle),sin(this.angle),0);
    this.wanderDist--; 
    var prevPosition = me.position;
    me.position.add(this.step);
    var collide = this.collideWall(me);
    var reboundVec;
    if(collide !== -1){
            
        if(this.angle < toPI*180){
            this.angle += toPI*180;
        }
        else{
            this.angle -= toPI*180;
        }
        this.step.set(cos(this.angle),sin(this.angle),0);
        me.position = prevPosition;
        me.position.add(this.step);
      
    }
    me.angle = this.angle + toPI*(90);
    if(dist(me.position.x,me.position.y,target.position.x,target.position.y) < 150 && this.changeStateDisable === 0){
        me.changeState(1);
    }
    if(this.changeStateDisable !== 0){
        this.changeStateDisable--;
    }
};

chaseState.prototype.collideWall = function(me){
    for(var i = 0 ; i < walls.length ; i++){
        if(dist(me.position.x,me.position.y,walls[i].position.x,walls[i].position.y) < 20){
            return i;
        }
    }
    if(dist(me.position.x,me.position.y,fire.position.x,fire.position.y) < 30 && fire.currState === 3){
        return 900;
    }
    return -1;
};

chaseState.prototype.execute = function(me,target){
    if(dist(me.position.x,me.position.y,target.position.x,target.position.y) < 5){
        start = 2;
        return;
    }
    if(dist(me.position.x,me.position.y,target.position.x,target.position.y) > 5){
        var prevPosition = me.position;
        var prevAngle = me.angle - toPI*(90);
        if(this.collideWall(me) !== -1){
            
            if(prevAngle < toPI*180){
                prevAngle += toPI*180;
            }
            else{
                prevAngle -= toPI*180;
            }
            this.step.set(cos(prevAngle),sin(prevAngle),0);
            this.step.mult(25);
            me.position = prevPosition;
            me.position.add(this.step);
            me.angle = prevAngle +toPI*(90);
            me.changeState(0);
            me.state[0].changeStateDisable = 120; // hack to avoid getting stuck
            return;

        }
        this.step.set(target.position.x - me.position.x, target.position.y - me.position.y,0);
        this.step.normalize();
        this.step.mult(2);
        me.angle = this.step.heading() + toPI*(90);
        me.position.add(this.step);

    }
    


    if(dist(me.position.x,me.position.y,target.position.x,target.position.y) > 150){
        me.changeState(0);
    }
};

deadState.prototype.execute = function(me,target){};
//Project 4 characters :- 

// Player Character :-  Replace this later with drawn character
var player = function(x,y){
    this.position = new PVector(x,y);
    this.angle = 0;
    this.state = 0;
    this.speed = 6;
    this.animCounter = 0;
    this.steadyCounter = 0;
};

player.prototype.draw = function() {
    this.animCounter = (this.animCounter + 1)%30000;
    this.steadyCounter++;
    pushMatrix();
        translate(this.position.x,this.position.y);
        rotate(this.angle+toPI*90);
        if(this.steadyCounter > 300){
            image(images[6],-10,-20,20,40);
        }
        else if(this.steadyCounter < 300 && this.steadyCounter > 60){
        
                image(images[4],-10,-20,20,40);
         
         
        }
        else{
            if(this.animCounter % 60 > 30){
                image(images[4],-10,-20,20,40);
            }
            else{
                image(images[5],-10,-20,20,40);
    
            }
        }
    popMatrix();

};

player.prototype.isCollide = function(){
    
    var x1,x2,y1,y2;
    
    
    switch(this.state){
        case 0:
            x1 = 20; y1 = -10 ; x2 = 20 ; y2 = 10;
            break;
        case 1:
            x1 = 10; y1 = 20 ; x2 = -10 ; y2 = 20;
            break;
        case 2:
            x1 = -20; y1 = -10 ; x2 = -20 ; y2 = 10;
            break;
        case 3:
            x1 = 10; y1 = -20 ; x2 = -10 ; y2 = -20;
            break;
    }
    
    

    for(var i = 0 ; i < walls.length ; i++){
        if((this.position.x + x1) > walls[i].position.x && (this.position.x + x1) < walls[i].position.x + 20 &&                                    (this.position.y + y1) > walls[i].position.y && (this.position.y + y1) < walls[i].position.y + 20 ){
            return true;
        }
        if((this.position.x + x2) > walls[i].position.x && (this.position.x + x2) < walls[i].position.x + 20 &&                                    (this.position.y + y2) > walls[i].position.y && (this.position.y + y2) < walls[i].position.y + 20 ){
            return true;
        }
        var midX =this.position.x + (x1+x2)/2;
        var midY = this.position.y + (y1+y2)/2;
        if((midX) > walls[i].position.x && (midX) < walls[i].position.x + 20 &&                                                  (midY) > walls[i].position.y && (midY) < walls[i].position.y + 20 ){
            return true;
        }
    }
    
    return false;

};

player.prototype.checkFood = function(){
    for(var i = 0 ; i < food.length ; i++){
        if(dist(this.position.x,this.position.y,food[i].position.x,food[i].position.y)<25){
            food[i].eat();
        }
    }
};

player.prototype.move = function(code){
    this.steadyCounter = 0;
    var prevX =this.position.x;
    var prevY = this.position.y;
    
    switch(code){
        case UP:
            this.position.y -= this.speed;
            this.angle = toPI*(-90);
            this.state = 3;
            break;
        case DOWN:
            this.position.y += this.speed;
            this.state = 1;
            this.angle = toPI*90;
            break;
        case RIGHT:
            this.position.x += this.speed;
            this.angle = 0;
            this.state = 0;
            break;
        case LEFT:
            this.position.x -= this.speed;
            this.angle = toPI*180;
            this.state = 2;
            break;
    }
    
    if(this.position.x <= 20){
       this.position.x = 20;
    }
    if(this.position.x >= 800){
       this.position.x = 800;
    }
        
    if(this.position.y <= 20){
        this.position.y = 20;
    }
    if(this.position.y >= 400){
        this.position.y = 400;
    }
    
    if(this.isCollide()){
        this.position.x = prevX;
        this.position.y = prevY;
    }
    this.checkFood();
    
};

var player1 = new player(240,100);

var fire = new fireObj();

var enemyNPC = function(x,y,id){
    this.id = id;
    this.position = new PVector(x,y);
    this.angle = 0;
    this.currState = 0;
    this.state = [new wanderState(), new chaseState(), new deadState()];
    this.animCount = 0;
    this.isKilled = 0;
};

enemyNPC.prototype.changeState = function(x){
    this.currState = x;
};

enemyNPC.prototype.draw = function() {
    if(this.isKilled === 1){
        return;
    }
    this.animCount = (this.animCount + 1)%30000;
    pushMatrix();
        translate(this.position.x,this.position.y);
        rotate( this.angle);
        if(this.animCount % 60 < 30){
            image(snakeImages[this.id*2],-10,-20,20,40);
        }
        else{
            image(snakeImages[this.id*2 + 1],-10,-20,20,40);
        }
        
    popMatrix();
};


var enemy1 = new enemyNPC(200,300,0);
var enemy2 = new enemyNPC(660,300,1);
var enemy3 = new enemyNPC(500,200,2);

fireOffState.prototype.execute = function(me){
    if(me.bombEnable === 1){
        me.changeState(1);
        me.position.set(player1.position.x,player1.position.y,0);
    }
};

bombSetState.prototype.execute = function(me){
    if(me.bombSetOff === 1){
        me.bombTimer = 100;
        me.changeState(2);
    }
};

bombTickState.prototype.execute = function(me){
    me.bombTimer--;
    if(me.bombTimer === 0){
        me.bombEnable = 1;
        me.changeState(3);
        me.fireTimer = 600;
    }
};

fireState.prototype.execute = function(me){
    me.fireTimer--;
    if(me.fireTimer === 0){
        me.changeState(0);
        me.bombSetOff = 0;
        me.bombEnable = 0;
        me.position.set(-50,-50,0);
    }
    if(dist(me.position.x,me.position.y,player1.position.x,player1.position.y) < 5){
        start = 2;
        me.changeState(0);
        me.bombSetOff = 0;
        me.bombEnable = 0;
        me.position.set(-50,-50,0);
    }
    if(dist(me.position.x,me.position.y,enemy1.position.x,enemy1.position.y) < 5){
        enemy1.currState =  2; // enemy burned
    }
    if(dist(me.position.x,me.position.y,enemy2.position.x,enemy2.position.y) < 5){
        enemy2.currState =  2; // enemy burned
    }
    if(dist(me.position.x,me.position.y,enemy3.position.x,enemy3.position.y) < 5){
        enemy3.currState =  2; // enemy burned
    }
};


mouseClicked = function(){
    if(start === 0){
        start = 1;
        return;
    }
    if(start === 1){
        if(fire.currState === 0){
            fire.bombEnable = 1;
        }
        else if(fire.currState === 1){
             fire.bombSetOff = 1;
        }
       
    }
};
keyPressed = function(){
  player1.move(keyCode);  
  
  if(keyCode === SHIFT){
      //debug information :- 
      
/*      println("player 1 :- " + player1.x + "," + player1.y);
      println("player 1 state :- "  + player1.state);*/
  }
  
};

var debugCount = 0;


draw = function() {

    if(start === 1){ //gameStarted
        pushMatrix();
        
        debugCount++;
        gameOverCounter = 300;
        background(50, 204, 26);
        noStroke();
        
        //Manage Translation of background map
        switch(translateState){
            case 0:
                if(player1.position.x > 300){
                    translateState = 1; 
                }
                break;
            case 1:
                if(player1.position.x > 700){
                    translateState = 2;
                }
                else if(player1.position.x < 300){
                    translateState = 0;
                }
                break;
            case 2:
                if(player1.position.x < 700){
                    translateState = 1;
                }
                break;
            
        }
        
        switch(translateState){

            case 1:
                translateDist = player1.position.x - 300;
                break;
            case 2:
                translateDist = 400;
                break;
            
        }
        
        translate(-translateDist, 0);
        
        //end ....Manage Translation of background map

        for (var i=0; i<walls.length; i++) {
            if(isDrawable(walls[i])){
                walls[i].draw();
            }
        }
    
        for (var i=0; i<grass.length; i++) {
            if(isDrawable(grass[i]))
            {
                grass[i].draw();
            }
        }
        
        for (var i=0; i<food.length; i++) {
            if(isDrawable(food[i]))
            {
                food[i].draw();
            }
        }
        
        player1.draw();

        if(isDrawable(enemy1)){  
            enemy1.draw();
        }
        
        enemy1.state[enemy1.currState].execute(enemy1,player1);
        
        if(isDrawable(enemy2)){ 
            enemy2.draw();
        }
        
        enemy2.state[enemy2.currState].execute(enemy2,player1);
        
        if(isDrawable(enemy3)){  
            enemy3.draw();
        }
        
        enemy3.state[enemy3.currState].execute(enemy3,player1);
        
        
        
        fire.state[fire.currState].execute(fire);
        fire.draw();

        
        popMatrix();
        fill(207, 16, 147,128);
        rect(6,384,60,14);
        fill(0,0,0);
        textSize(15);
        text("Score "+score,10,394);
    }
    else if(start === 0){
        if(customCharMade === 0){
            customChar();
            initTilemap();
        }
        
        background(25, 194, 98);
        noStroke();
        fill(27, 222, 95);
        rect(100,150,200,100,15);
        fill(18, 41, 196);
        textSize(20);
        text("Instructions :- ", 20, 20);
        text("Navigate the turtle using arrow keys ",20,40);
        text("to eat the tomatoes.",20,60);
        text("Snakes are out to kill the turtle.",20,80);
        text("Use mouse-click to plant and detonate",20,100);
        text("bombs (1 at a time) to scare snakes.",20,120);
        text("warning :- detonation can kill on spot",20,280);

        text("Click mouse to begin", 20, 350);
       
        text("Project 4 !",150,200);
        text("Turtles and Snakes",120,220);

        
    }
    else if(start === 2){ //GameOver
        background(25, 194, 98);
        noStroke();
        fill(27, 222, 95);
        rect(100,150,200,100,15);
        fill(18, 41, 196);
        textSize(20);
        if(won === 0){
            text("Game Over !",140,180);
        }
        else{
            text("You won!",140,180);
        }
        text("You scored "+score,140,200);
        text("New game in "+floor(gameOverCounter/60),140,220);
        gameOverCounter--;
        if(gameOverCounter === 0){
            player1 = new player(240,100);
            enemy1 = new enemyNPC(200,300,0);
            enemy2 = new enemyNPC(660,300,1);
            enemy3 = new enemyNPC(500,200,2);
            fire = new fireObj();
            for (var i=0; i<food.length; i++) {
         
                food[i].eaten = 0;
           
            }
            score = 0;
            start = 0;
            won = 0;
            translateState = 0;
            translateDist = 0;
        }
    }

};
}




}};

